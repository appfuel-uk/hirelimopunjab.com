{
  "manifest": {
    "name": "gatsby-plugin-sharp",
    "description": "Wrapper of the Sharp image manipulation library for Gatsby plugins",
    "version": "1.6.25",
    "author": {
      "name": "Kyle Mathews",
      "email": "mathews.kyle@gmail.com"
    },
    "dependencies": {
      "async": "^2.1.2",
      "babel-runtime": "^6.26.0",
      "bluebird": "^3.5.0",
      "image-size": "^0.5.1",
      "imagemin": "^5.2.2",
      "imagemin-pngquant": "^5.0.0",
      "imagemin-webp": "^4.0.0",
      "lodash": "^4.17.4",
      "potrace": "^2.1.1",
      "progress": "^1.1.8",
      "sharp": "^0.17.3",
      "svgo": "^0.7.2"
    },
    "devDependencies": {
      "babel-cli": "^6.26.0",
      "cross-env": "^5.0.5"
    },
    "keywords": [
      "gatsby",
      "image",
      "sharp"
    ],
    "license": "MIT",
    "main": "index.js",
    "scripts": {
      "build": "babel src --out-dir . --ignore __tests__",
      "watch": "babel -w src --out-dir . --ignore __tests__",
      "prepublish": "cross-env NODE_ENV=production npm run build"
    },
    "_registry": "npm",
    "_loc": "/home/ali/Project/uforce/cairo/.yarn/v1/npm-gatsby-plugin-sharp-1.6.25-c6c67276ac4ed7ca9ac2b15dcdcd199f12e4208d/package.json",
    "readmeFilename": "README.md",
    "readme": "# gatsby-plugin-sharp\n\nExposes several image processing functions built on the\n[Sharp image processing library](https://github.com/lovell/sharp). This is a\nlow-level helper plugin generally used by other Gatsby plugins. You generally\nshouldn't be using this directly but might find it helpful if doing very custom\nimage processing.\n\nIt aims to provide excellent out-of-the box settings for processing common web\nimage formats.\n\nFor JPEGs it generates progressive images with a default quality level of 50.\n\nFor PNGs it uses [pngquant](https://github.com/pornel/pngquant) to compress\nimages. By default it uses a quality setting of [50-75].\n\n## Install\n\n`npm install --save gatsby-plugin-sharp`\n\n## How to use\n\n```javascript\n// In your gatsby-config.js\nplugins: [`gatsby-plugin-sharp`];\n```\n\n## Methods\n\n### resize\n\n#### Parameters\n\n* `width` (int, default: 400)\n* `height` (int)\n* `quality` (int, default: 50)\n* `jpegProgressive` (bool, default: true)\n* `pngCompressionLevel` (int, default: 9)\n* `base64`(bool, default: false)\n\n#### Returns\n\n* `src` (string)\n* `width` (int)\n* `height` (int)\n* `aspectRatio` (float)\n\n### responsiveResolution\n\nAutomatically create sizes for different resolutions — we do 1x, 1.5x, 2x, and\n3x.\n\n#### Parameters\n\n* `width` (int, default: 400)\n* `height` (int)\n* `quality` (int, default: 50)\n\n#### Returns\n\n* `base64` (string)\n* `aspectRatio` (float)\n* `width` (float)\n* `height` (float)\n* `src` (string)\n* `srcSet` (string)\n\n### responsiveSizes\n\nCreate sizes (in width) for the image. If the max width of the container for the\nrendered markdown file is 800px, the sizes would then be: 200, 400, 800, 1200,\n1600, 2400 – enough to provide close to the optimal image size for every device\nsize / screen resolution.\n\nOn top of that, responsiveSizes returns everything else (namely aspectRatio and\na base64 image to use as a placeholder) you need to implement the \"blur up\"\ntechnique popularized by Medium and Facebook (and also available as a Gatsby\nplugin for Markdown content as gatsby-remark-images).\n\n#### Parameters\n\n* `maxWidth` (int, default: 800)\n* `maxHeight` (int)\n* `quality` (int, default: 50)\n* `sizeByPixelDensity` (bool, default: false)\n\n#### Returns\n\n* `base64` (string)\n* `aspectRatio` (float)\n* `src` (string)\n* `srcSet` (string)\n* `sizes` (string)\n* `originalImg` (string)\n\n### Shared Options\n\nIn addition to their individual parameters, all methods above share the\nfollowing:\n\n* `grayscale` (bool, default: false)\n* `duotone` (bool|obj, default: false)\n* `toFormat` (string, default: '')\n* `cropFocus` (string, default: '[sharp.strategy.attention][6]')\n\n#### toFormat\n\nConvert the source image to one of the following available options: `NO_CHANGE`,\n`JPG`, `PNG`, `WEBP`.\n\n#### cropFocus\n\nChange the cropping focus. Available options: `CENTER`, `NORTH`, `NORTHEAST`,\n`EAST`, `SOUTHEAST`, `SOUTH`, `SOUTHWEST`, `WEST`, `NORTHWEST`, `ENTROPY`,\n`ATTENTION`. See Sharp's [crop][6].\n\n#### rotate\n\nRotate the image (after cropping). See Sharp's [rotate][7].\n\n#### grayscale\n\nUses Sharp's [greyscale][8] to convert the source image to 8-bit greyscale, 256\nshades of grey, e.g.\n\n```javascript\nallImageSharp {\n  edges {\n    node {\n      ... on ImageSharp {\n        resize(width: 150, height: 150, grayscale: true) {\n          src\n        }\n      }\n    }\n  }\n}\n```\n\n#### duotone\n\nApplys a \"duotone\" effect (see [I][1], [II][2], [III][3]) to the source image if\ngiven two hex colors `shadow` and `highlight` defining start and end color of\nthe duotone gradient, e.g.\n\n```javascript\nresponsiveResolution(\n  width: 800,\n  duotone: {\n    highlight: \"#f00e2e\",\n    shadow: \"#192550\"\n  }\n) {\n  src\n  srcSet\n  base64\n}\n```\n\nthe source image colors will be converted to match a gradient color chosen based\non each pixel's [relative luminance][4].\\\nLogic is borrowed from [react-duotone][5].\n\nYou can pass a third optional parameter, `opacity`:\n\n```javascript\nresponsiveResolution(\n  width: 800,\n  duotone: {\n    highlight: \"#f00e2e\",\n    shadow: \"#192550\",\n    opacity: 50\n  }\n) {\n  src\n  srcSet\n  base64\n}\n```\n\nIf set, a semi-transparent version of duotone'd image will be composited over\nthe original image, allowing the original image and its colors to partially\n\"shine through\". _Heads up_: If the original image contains an alpha channel it\nwill be [flattened][15] before creating the composite.\n\nThis works by adding an alpha channel to the duotone'd image - then we let Sharp\ndo its magic via\n[`overlayWith`](http://sharp.dimens.io/en/stable/api-composite/#overlaywith);\nquoting the Sharp documentation:\n\n> If the overlay image contains an alpha channel then composition with\n> <a href=\"https://en.wikipedia.org/wiki/Alpha_compositing\">premultiplication</a>\n> will occur.\n\n#### tracedSVG\n\nGenerates a traced SVG of the image (see [the original GitHub issue][9]) and\nreturns the SVG as \"[optimized URL-encoded][10]\" `data:` URI. It it used in\n[gatsby-image](/packages/gatsby-image/) to provide an\nalternative to the default inline base64 placeholder image.\n\nUses [node-potrace][11] and [SVGO][12] under the hood. Default settings for\nnode-potrace:\n\n```javascript\n  {\n    color: `lightgray`,\n    optTolerance: 0.4,\n    turdSize: 100,\n    turnPolicy: TURNPOLICY_MAJORITY,\n  }\n```\n\nAll [node-potrace `Potrace` parameters][13] are exposed and can be set via the\n`traceSVG` argument:\n\n```javascript\nresponsiveResolution(\n  traceSVG: {\n    color: \"#f00e2e\"\n    turnPolicy: TURNPOLICY_MINORITY\n    blackOnWhite: false\n  }\n) {\n  src\n  srcSet\n  tracedSVG\n}\n```\n\n[1]: https://alistapart.com/article/finessing-fecolormatrix\n[2]: http://blog.72lions.com/blog/2015/7/7/duotone-in-js\n[3]: https://ines.io/blog/dynamic-duotone-svg-jade\n[4]: https://en.wikipedia.org/wiki/Relative_luminance\n[5]: https://github.com/nagelflorian/react-duotone\n[6]: http://sharp.dimens.io/en/stable/api-resize/#crop\n[7]: http://sharp.dimens.io/en/stable/api-operation/#rotate\n[8]: http://sharp.dimens.io/en/stable/api-colour/#greyscale\n[9]: https://github.com/gatsbyjs/gatsby/issues/2435\n[10]: https://codepen.io/tigt/post/optimizing-svgs-in-data-uris\n[11]: https://github.com/tooolbox/node-potrace\n[12]: https://github.com/svg/svgo\n[13]: https://github.com/tooolbox/node-potrace#parameters\n[14]: https://github.com/oliver-moran/jimp\n[15]: http://sharp.dimens.io/en/stable/api-operation/#flatten\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/gatsby-plugin-sharp/-/gatsby-plugin-sharp-1.6.25.tgz#c6c67276ac4ed7ca9ac2b15dcdcd199f12e4208d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/gatsby-plugin-sharp/-/gatsby-plugin-sharp-1.6.25.tgz",
    "hash": "c6c67276ac4ed7ca9ac2b15dcdcd199f12e4208d",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "c6c67276ac4ed7ca9ac2b15dcdcd199f12e4208d"
}