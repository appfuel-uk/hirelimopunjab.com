{
  "manifest": {
    "name": "slug",
    "description": "slugifies even utf-8 chars!",
    "version": "0.9.1",
    "homepage": "https://github.com/dodo/node-slug",
    "author": {
      "name": "dodo",
      "url": "https://github.com/dodo"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/dodo/node-slug.git"
    },
    "main": "slug.js",
    "engines": {
      "node": ">= 0.4.x"
    },
    "keywords": [
      "slugify",
      "slug",
      "string",
      "utf8",
      "utf-8",
      "unicode",
      "url"
    ],
    "scripts": {
      "test": "./node_modules/.bin/mocha ./test/*.test.* --require should --reporter spec --colors --compilers coffee:coffee-script/register"
    },
    "dependencies": {
      "unicode": ">= 0.3.1"
    },
    "devDependencies": {
      "mocha": "~1.17.1",
      "should": "~3.1.2",
      "coffee-script": "~1.7.1"
    },
    "bin": {
      "slug": "bin/slug.js"
    },
    "licenses": [
      {
        "type": "MIT",
        "url": "http://github.com/dodo/node-slug/raw/master/LICENSE"
      }
    ],
    "_registry": "npm",
    "_loc": "/home/ali/Project/uforce/cairo/.yarn/v1/npm-slug-0.9.1-af08f608a7c11516b61778aa800dce84c518cfda/package.json",
    "readmeFilename": "README.md",
    "readme": "# [slug](https://github.com/dodo/node-slug)\n\nslugifies every string, even when it contains unicode!\n\nMake strings url-safe.\n\n- respecting [RFC 3986](https://tools.ietf.org/html/rfc3986)\n- Comprehensive tests\n- No dependencies (except the unicode table)\n- Not in coffee-script (except the tests lol)\n- Coerces foreign symbols to their english equivalent\n- Works in browser (window.slug) and AMD/CommonJS-flavoured module loaders (except the unicode symbols unless you use browserify but who wants to download a ~2mb js file, right?)\n\n```\nnpm install slug\n```\n\n```\nbower install slug\n```\n\n## example\n\n```javascript\nvar slug = require('slug')\nvar print = console.log.bind(console, '>')\n\nprint(slug('i ♥ unicode'))\n// > i-love-unicode\n\nprint(slug('unicode ♥ is ☢')) // yes!\n// > unicode-love-is-radioactive\n\nprint(slug('i ♥ unicode', '_')) // If you prefer something else then `-` as seperator\n// > i_love_unicode\n\nslug.charmap['♥'] = 'freaking love' // change default charmap or use option {charmap:{…}} as 2. argument\nprint(slug('I ♥ UNICODE', {lowercase: false})) // If you prefer not lower case\n// > I-freaking-love-UNICODE\n\nprint(slug('i <3 unicode'))\n// > i-love-unicode\n```\n\n## options\n\n```javascript\n// options is either object or replacement (sets options.replacement)\nslug('string', [{options} || 'replacement']);\n```\n\n```javascript\nslug.defaults.mode ='pretty';\nslug.defaults.modes['rfc3986'] = {\n    replacement: '-',      // replace spaces with replacement\n    symbols: true,         // replace unicode symbols or not\n    remove: null,          // (optional) regex to remove characters\n    lower: true,           // result in lower case\n    charmap: slug.charmap, // replace special characters\n    multicharmap: slug.multicharmap // replace multi-characters\n};\nslug.defaults.modes['pretty'] = {\n    replacement: '-',\n    symbols. true,\n    remove: /[.]/g,\n    lower: false,\n    charmap: slug.charmap,\n    multicharmap: slug.multicharmap\n};\n```\n\n## browser\n\nWhen using browserify you might want to remove the symbols table from your bundle by using `--ignore` similar to this:\n```bash\n# generates a standalone slug browser bundle:\nbrowserify slug.js --ignore unicode/category/So -s slug > slug-browser.js\n```\n\n[![Build Status](https://secure.travis-ci.org/dodo/node-slug.png)](http://travis-ci.org/dodo/node-slug)\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/dodo/node-slug/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n",
    "license": "MIT",
    "licenseText": "Copyright (c) 2014 ▟ ▖▟ ▖(dodo)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/slug/-/slug-0.9.1.tgz#af08f608a7c11516b61778aa800dce84c518cfda",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/slug/-/slug-0.9.1.tgz",
    "hash": "af08f608a7c11516b61778aa800dce84c518cfda",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "af08f608a7c11516b61778aa800dce84c518cfda"
}