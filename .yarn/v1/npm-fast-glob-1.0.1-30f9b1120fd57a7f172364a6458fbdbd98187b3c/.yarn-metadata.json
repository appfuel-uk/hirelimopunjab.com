{
  "manifest": {
    "name": "fast-glob",
    "version": "1.0.1",
    "description": "Is a faster `node-glob` alternative",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/mrmlnc/fast-glob.git"
    },
    "author": {
      "name": "Denis Malinochkin",
      "url": "canonium.com"
    },
    "engines": {
      "node": ">=4.0.0"
    },
    "typings": "out/fglob.d.ts",
    "keywords": [
      "glob",
      "patterns",
      "fast",
      "implementation"
    ],
    "devDependencies": {
      "@types/micromatch": "^2.3.29",
      "@types/mocha": "^2.2.41",
      "@types/node": "^7.0.27",
      "@types/rimraf": "0.0.28",
      "fs-extra": "^3.0.1",
      "glob": "^7.1.2",
      "mocha": "^3.4.2",
      "rimraf": "^2.6.1",
      "tslint": "^5.4.2",
      "tslint-config-xo": "^1.2.0",
      "typescript": "^2.3.4"
    },
    "dependencies": {
      "bash-glob": "^1.0.1",
      "glob-parent": "^3.1.0",
      "micromatch": "^3.0.3",
      "readdir-enhanced": "^1.5.2"
    },
    "scripts": {
      "clean": "rimraf out",
      "lint": "tslint src/**/*.ts",
      "compile": "tsc",
      "test": "rimraf .tmp && mocha out/{,**/}*.spec.js -s 0",
      "build": "npm run clean && npm run lint && npm run compile && npm test",
      "watch": "npm run clean && npm run lint && npm run compile -- --sourceMap --watch",
      "bench": "npm run clean && npm run lint && npm run compile && bash benchmark/benchmark.sh"
    },
    "_registry": "npm",
    "_loc": "/home/ali/Project/uforce/cairo/.yarn/v1/npm-fast-glob-1.0.1-30f9b1120fd57a7f172364a6458fbdbd98187b3c/package.json",
    "readmeFilename": "README.md",
    "readme": "# fast-glob\n\n> Is a faster (1.5-8x for most cases) `node-glob` alternative.\n\n## Install\n\n```\n$ npm i -S fast-glob\n```\n\n## Why?\n\n  * Fast by using Streams, Promises and Bash Globbing on Linux machines. Used [readdir-enhanced](https://github.com/BigstickCarpet/readdir-enhanced), [micromatch](https://github.com/jonschlinkert/micromatch) and [bash-glob](https://github.com/jonschlinkert/bash-glob).\n  * You can limit the depth of your search (only for non-Bash mode).\n  * You can get not only file paths, but also their `fs.Stats` objects with the additional `path` property.\n  * You can transform file path or `fs.Stats` object before sending it to an array.\n\n## Usage\n\n```js\nconst fastGlob = require('fast-glob');\n\n// Async\nfastGlob('dir/**/*.txt').then((files) => {\n  console.log(files); // ['dir/a.txt', ...]\n});\n\n// Sync\nconst files = fastGlob.sync('dir/**/*.txt');\nconsole.log(files); // ['dir/a.txt', ...]\n```\n\n## API\n\n### fastGlob(patterns, [options])\n\n  * patterns `String|String[]` Patterns to be matched\n  * options `Object`\n  * return `String[]` or `fs.Stats[]` with `path` property\n\n### fastGlob.sync(patterns, [options]) => []\n\n  * patterns `String|String[]` Patterns to be matched\n  * options `Object`\n  * return `String[]` or `fs.Stats[]` with `path` property\n\n## options\n\n| Option      | Type              | Default                | Description |\n|:------------:|:-----------------:|:---------------------:|:------------|\n| `cwd`        | `String`          | `process.cwd`         | The current working directory in which to search |\n| `deep`       | `Number|Boolean`  | `true`                | The deep option can be set to true to traverse the entire directory structure, or it can be set to a number to only traverse that many levels deep. |\n| `ignore`     | `String|String[]` | `[]`                  | Add a pattern or an array of glob patterns to exclude matches. |\n| `stats`      | `Boolean`         | `false`               | Return `fs.Stats` with `path` property instead of file path. |\n| `onlyFiles`  | `Boolean`         | `false`               | Return only files. |\n| `onlyDirs`   | `Boolean`         | `false`               | Return only directories. |\n| `bashNative` | `String[]`        | `['darwin', 'linux']` | Use bash-powered globbing (2-15x faster on Linux, but slow on BashOnWindows) for specified platforms. See [available values for array](https://nodejs.org/dist/latest-v7.x/docs/api/process.html#process_process_platform). |\n| `transform`  | `Function`        | `null`                | Allows you to transform a path or `fs.Stats` object before sending to the array. |\n\n## Compatible with `node-glob`?\n\nNot fully, because `fast-glob` not implements all options of `node-glob`.\n\n## Example for `transform` option\n\n```js\nfastGlob('dir/**/*.txt', { transform: readFilePromise }).then((files) => {\n  console.log(files); // ['dir/a.txt', ...]\n  return Promise.all(files);\n}).then((files) => {\n  console.log(files); // ['content from dir/a.txt', ...]\n});\n```\n\n## Benchmark\n\n**Tech specs:**\n\n * Intel Core i7-3610QM\n * RAM 8GB\n * SSD (555MB/S, 530MB/S)\n * Windows 10 + VirtualBox with Manjaro\n * Node.js v7.3.0\n\n```shell\n$ npm run bench\n\n==============================\nBenchmark for 10 files\n==============================\n\nbash: 6 ms\nnode-glob (10): 19.47606 ms\nbash-glob (10): 23.406374 ms\nfast-glob (10) as native: 25.359293 ms\nfast-glob (10) as fast: 33.696387 ms\n\n==============================\nBenchmark for 50 files\n==============================\n\nbash: 6 ms\nnode-glob (54): 28.43855 ms\nbash-glob (54): 20.731202 ms\nfast-glob (54) as native: 22.709236 ms\nfast-glob (54) as fast: 25.057461 ms\n\n==============================\nBenchmark for 100 files\n==============================\n\nbash: 5 ms\nnode-glob (109): 34.811618 ms\nbash-glob (109): 21.624256 ms\nfast-glob (109) as native: 26.291311 ms\nfast-glob (109) as fast: 29.61791 ms\n\n==============================\nBenchmark for 500 files\n==============================\n\nbash: 7 ms\nnode-glob (549): 90.513766 ms\nbash-glob (549): 23.116938 ms\nfast-glob (549) as native: 30.978642 ms\nfast-glob (549) as fast: 61.367613 ms\n\n==============================\nBenchmark for 1000 files\n==============================\n\nbash: 11 ms\nnode-glob (1099): 139.44816 ms\nbash-glob (1099): 35.691985 ms\nfast-glob (1099) as native: 36.770455 ms\nfast-glob (1099) as fast: 84.387065 ms\n\n==============================\nBenchmark for 5000 files\n==============================\n\nbash: 43 ms\nnode-glob (5499): 584.910373 ms\nbash-glob (5499): 90.38803 ms\nfast-glob (5499) as native: 97.143759 ms\nfast-glob (5499) as fast: 233.977073 ms\n\n==============================\nBenchmark for 10000 files\n==============================\n\nbash: 96 ms\nnode-glob (10999): 1143.377267 ms\nbash-glob (10999): 169.416486 ms\nfast-glob (10999) as native: 198.930152 ms\nfast-glob (10999) as fast: 531.693878 ms\n```\n\n## Changelog\n\nSee the [Releases section of our GitHub project](https://github.com/mrmlnc/fast-glob/releases) for changelogs for each release version.\n\n## License\n\nThis software is released under the terms of the MIT license.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) Denis Malinochkin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/fast-glob/-/fast-glob-1.0.1.tgz#30f9b1120fd57a7f172364a6458fbdbd98187b3c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/fast-glob/-/fast-glob-1.0.1.tgz",
    "hash": "30f9b1120fd57a7f172364a6458fbdbd98187b3c",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "30f9b1120fd57a7f172364a6458fbdbd98187b3c"
}