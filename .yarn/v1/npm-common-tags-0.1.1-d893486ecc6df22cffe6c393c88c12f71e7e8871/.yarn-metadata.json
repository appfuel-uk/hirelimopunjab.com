{
  "manifest": {
    "name": "common-tags",
    "description": "a few common utility template tags for ES2015",
    "version": "0.1.1",
    "author": {
      "name": "Declan de Wet",
      "email": "declandewet@me.com"
    },
    "ava": {
      "verbose": true,
      "babel": "inherit",
      "require": [
        "babel-register"
      ],
      "files": [
        "src/**/*.test.js"
      ]
    },
    "bugs": {
      "url": "http://github.com/declandewet/common-tags/issues"
    },
    "dependencies": {
      "babel-runtime": "^6.6.1"
    },
    "devDependencies": {
      "ava": "^0.14.0",
      "babel-cli": "^6.8.0",
      "babel-eslint": "^6.0.4",
      "babel-plugin-transform-runtime": "^6.8.0",
      "babel-preset-es2015": "^6.6.0",
      "babel-preset-stage-0": "^6.5.0",
      "babel-register": "^6.8.0",
      "codecov": "^1.0.1",
      "nyc": "^6.4.4",
      "rimraf": "^2.5.2",
      "snazzy": "^4.0.0",
      "when": "^3.7.7"
    },
    "engines": {
      "node": ">=4.0.0",
      "npm": ">=3.0.0"
    },
    "homepage": "https://github.com/declandewet/common-tags",
    "keywords": [
      "array",
      "babel",
      "es2015",
      "es2015-tag",
      "es6",
      "es6-tag",
      "html",
      "indent",
      "indents",
      "line",
      "literal",
      "multi",
      "multiline",
      "normalize",
      "one",
      "oneline",
      "single",
      "singleline",
      "string",
      "strings",
      "strip",
      "tag",
      "tagged",
      "template"
    ],
    "license": "MIT",
    "main": "lib",
    "repository": {
      "type": "git",
      "url": "https://github.com/declandewet/common-tags"
    },
    "scripts": {
      "build": "rimraf lib && babel src -d lib",
      "codecov": "npm run coverage && codecov",
      "coverage": "nyc report --reporter=lcov",
      "lint": "snazzy",
      "precoveralls": "npm run coverage",
      "prerelease": "npm run build",
      "release": "npm publish",
      "test": "npm run lint && nyc ava"
    },
    "standard": {
      "parser": "babel-eslint",
      "ignore": [
        "readme.md"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/ali/Project/uforce/cairo/.yarn/v1/npm-common-tags-0.1.1-d893486ecc6df22cffe6c393c88c12f71e7e8871/package.json",
    "readmeFilename": "readme.md",
    "readme": "# Common Tags\n\nThis is a small library containing ES6/ES2015 template tags I often find myself\nusing.\n\nInfo | Badges\n-----|-------\nVersion | [![github release](https://img.shields.io/github/release/declandewet/common-tags.svg?style=flat-square)](https://github.com/declandewet/common-tags/releases/latest) [![npm version](https://img.shields.io/npm/v/common-tags.svg?style=flat-square)](http://npmjs.org/package/common-tags)\nLicense | [![npm license](https://img.shields.io/npm/l/common-tags.svg?style=flat-square)](https://github.com/declandewet/common-tags/blob/master/license.md)\nPopularity | [![npm downloads](https://img.shields.io/npm/dm/common-tags.svg?style=flat-square)](http://npm-stat.com/charts.html?package=common-tags)\nTesting | [![Build status](https://ci.appveyor.com/api/projects/status/75eiommx0llt3sgd?svg=true)](https://ci.appveyor.com/project/declandewet/common-tags) [![build status](https://img.shields.io/travis/declandewet/common-tags.svg?style=flat-square)](https://travis-ci.org/declandewet/common-tags) [![codecov.io](https://img.shields.io/codecov/c/gh/declandewet/common-tags.svg?style=flat-square)](https://codecov.io/gh/declandewet/common-tags?branch=master)\nQuality | [![dependency status](https://img.shields.io/david/declandewet/common-tags.svg?style=flat-square)](https://david-dm.org/declandewet/common-tags) [![dev dependency status](https://img.shields.io/david/dev/declandewet/common-tags.svg?style=flat-square)](https://david-dm.org/declandewet/common-tags#info=devDependencies)\nStyle | [![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n\n### Installation:\n\n```sh\n$ npm install common-tags --save\n```\n\n## Why should you care?\n\nIf you want to keep your single-line strings under 80 characters without\nresorting to crazy string concatenation:\n\n```js\nimport {oneLine} from 'common-tags'\nlet verb = 'crazy'\nconsole.log(oneLine`\n  this is a\n  super ${verb}\n  long string\n  that will probably\n  exceed our constraint\n  of a maximum\n  of 80 characters\n  in length,\n  and we'd probably\n  have to horizontally scroll\n  our editor\n  if we didn't have\n  ES6 in our\n  utility belt.\n`)\n```\n\nOutputs:\n\n```\nThis is a super crazy long string that will probably exceed our constraint of a maximum of 80 characters in length, and we'd probably have to horizontally scroll our editor if we didn't have ES6 in our utility belt.\n```\n\nIf you want keep your single-line strings under 80 characters while triming the new lines:\n\n```js\nimport {oneLineTrim} from 'common-tags'\nlet verb = 'crazy'\nconsole.log(oneLineTrim`\n  https://www.google.fr/search?q=common-tags\n  &oq=common-tags&aqs=chrome..69i57j0l5.1303j0j7\n  &sourceid=chrome&es_sm=91\n  &ie=UTF-8#safe=off&q=common-tags+npm\n`)\n```\n\nOutputs:\n\n```\nhttps://www.google.fr/search?q=common-tags&oq=common-tags&aqs=chrome..69i57j0l5.1303j0j7&sourceid=chrome&es_sm=91&ie=UTF-8#safe=off&q=common-tags+npm`\n```\n\nIf you want to strip the annoying indentation from the beginning of each line in a multiline string:\n\n```js\nimport {stripIndent} from 'common-tags';\nlet verb = 'notice';\nconsole.log(stripIndent`\n  This is a multi-line string.\n  You'll ${verb} that it is indented.\n  We don't want to output this indentation.\n    But we do want to keep this line indented.\n`);\n```\n\nOutputs:\n\n```\nThis is a multi-line string.\nYou'll notice that it is indented.\nWe don't want to output this indentation.\n  But we do want to keep this line indented.\n```\n\nYou'll often find that you might want to include an array in a template. Typically, doing something like\n`${array.join(', ')}` would work - but what if you're printing a list of items\nin an HTML template and want to maintain the indentation? You'd have to count the\nspaces manually and include them in the `.join()` call - which is a bit *ugly* for my taste.\n\n```js\nimport {html} from 'common-tags'\nlet fruits = ['apple', 'orange', 'watermelon']\nconsole.log(html`\n  <div class=\"list\">\n    <ul>\n      ${fruits.map(fruit => `<li>${fruit}</li>`)}\n    </ul>\n  </div>\n`);\n```\n\nOutputs:\n\n```html\n<div class=\"list\">\n  <ul>\n    <li>apple</li>\n    <li>orange</li>\n    <li>watermelon</li>\n  </ul>\n</div>\n```\n\n## API\n\n#### Default Export: `tags(<Object:settings>)`\n\nAccepts an object where keys are the\nname of tags you wish to combine.\nReturns a tag that transforms a\ntemplate literal in accordance with the\nrules you've set.\n\nFor example, to inline arrays as a\ncomma-separated list, and keep everything on one line:\n\n```js\nimport tags from 'common-tags'\nlet fruits = ['apples', 'bananas', 'kiwi']\nlet tag = tags({\n  oneLine: true,\n  includeArrays: {\n    separator: ',',\n    conjunction: 'and'\n  }\n})\nconsole.log(tag`\n  I like fruits, but I especially love\n  ${fruits.map(fruit => `${fruit}`)}.\n`)\n```\n\nOutputs:\n\n```\nI like fruits, but I especially love apples, bananas and kiwi.\n```\n\n#### Options:\n\n```js\n{\n  trim: true, // trims leading and trailing whitespace\n  oneLine: false, // outputs everything on one line with 1 space between new lines\n  oneLineTrim: false, // outputs everything on one line without spaces between new lines\n  stripIndent: false, // strips leading indents\n  includeArrays: false // inlines arrays\n}\n```\n\n`includeArrays` can also be an object, which accepts:\n\n```js\n{\n  separator: null, // set this to the string you want to act as the separator for each item\n  conjunction: null // the word you want to appear before the last item\n}\n```\n\nThis module also exports aliases for some commonly used combinations:\n\n- *html*\n  - `stripIndent: true`\n  - `includeArrays: true`\n- *oneLine*\n  - `oneLine: true`\n- *oneLineTrim*\n  - `oneLineTrim: true`\n- *inlineLists*\n  - `includeArrays: true`\n  - `stripIndent: true`\n- *stripIndent*\n  - `stripIndent: true`\n- *commaLists*\n  - `includeArrays: { separator: ',' }`\n  - `stripIndent: true`\n- *commaListsOr*\n  - `includeArrays: { separator: ',', conjunction: 'or' }`\n  - `stripIndent: true`\n- *commaListsAnd*\n  - `includeArrays: { separator: ',', conjunction: 'and' }`\n  - `stripIndent: true`\n- *oneLineCommaLists*\n  - `oneLine: true`\n  - `includeArrays: { separator: ',' }`\n- *oneLineCommaListsOr*\n  - `oneLine: true`\n  - `includeArrays: { separator: ',', conjunction: 'or' }`\n- *oneLineCommaListsAnd*\n  - `oneLine: true`\n  - `includeArrays: { separator: ',', conjunction: 'and' }`\n\n# Other cool ES6 template tag modules:\n\n- [regexr](https://www.npmjs.org/package/regexr) - provides an ES6 template tag function that makes it easy to compose regexes out of template strings without double-escaped hell.\n- [deindent](https://www.npmjs.com/package/deindent) - ES6 template string helper for deindentation (adapted from https://gist.github.com/zenparsing/5dffde82d9acef19e43c).\n- [shell-escape-tag](https://www.npmjs.com/package/shell-escape-tag) - An ES6+ template tag which escapes parameters for interpolation into shell commands.\n- [sql-tag](https://www.npmjs.com/package/sql-tag) - A template tag for writing elegant sql strings.\n- [digraph-tag](https://www.npmjs.com/package/digraph-tag) - ES6 string template tag for quickly generating directed graph data\n- [pg-template-tag](https://www.npmjs.com/package/pg-template-tag) - ECMAScript 6 (2015) template tag function to write queries for node-postgres.\n",
    "licenseText": "License (MIT)\n-------------\n\nCopyright Â© Declan de Wet\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/common-tags/-/common-tags-0.1.1.tgz#d893486ecc6df22cffe6c393c88c12f71e7e8871",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/common-tags/-/common-tags-0.1.1.tgz",
    "hash": "d893486ecc6df22cffe6c393c88c12f71e7e8871",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "d893486ecc6df22cffe6c393c88c12f71e7e8871"
}