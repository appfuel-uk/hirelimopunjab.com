{
  "manifest": {
    "name": "react-immutable-proptypes",
    "version": "2.1.0",
    "description": "PropType validators that work with Immutable.js.",
    "main": "dist/ImmutablePropTypes.js",
    "scripts": {
      "build": "./scripts/build",
      "test": "./scripts/test",
      "test-cov": "./scripts/test-cov",
      "prepublish": "npm run build",
      "lint": "./node_modules/.bin/eslint ./src"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/HurricaneJames/react-immutable-proptypes"
    },
    "keywords": [
      "react",
      "immutable-js",
      "immutable",
      "immutablejs",
      "proptype"
    ],
    "author": {
      "name": "James Burnett",
      "email": "HurricaneJamesEsq@gmail.com",
      "url": "https://github.com/HurricaneJames/react-immutable-proptypes"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/HurricaneJames/react-immutable-proptypes/issues"
    },
    "homepage": "https://github.com/HurricaneJames/react-immutable-proptypes",
    "peerDependencies": {
      "immutable": ">=3.6.2"
    },
    "devDependencies": {
      "babel": "^4.6.6",
      "babel-eslint": "^3.1.1",
      "eslint": "^0.21.0",
      "eslint-plugin-react": "^2.2.0",
      "expect.js": "^0.3.1",
      "immutable": "^3.7.4",
      "istanbul": "~0.3.7",
      "mocha": "^2.3.3",
      "react": "^0.14.0",
      "react-dom": "^0.14.0"
    },
    "_registry": "npm",
    "_loc": "/home/ali/Project/uforce/cairo/.yarn/v1/npm-react-immutable-proptypes-2.1.0-023d6f39bb15c97c071e9e60d00d136eac5fa0b4/package.json",
    "readmeFilename": "README.md",
    "readme": "# react-immutable-proptypes\n\n[![npm package](https://img.shields.io/npm/v/react-immutable-proptypes.svg?style=flat)](https://www.npmjs.org/package/react-immutable-proptypes) [![Code Climate](https://codeclimate.com/github/HurricaneJames/react-immutable-proptypes/badges/gpa.svg)](https://codeclimate.com/github/HurricaneJames/react-immutable-proptypes) [![Test Coverage](https://codeclimate.com/github/HurricaneJames/react-immutable-proptypes/badges/coverage.svg)](https://codeclimate.com/github/HurricaneJames/react-immutable-proptypes)\n\nPropType validators that work with Immutable.js.\n\n## About\n\nI got tired of seeing `React.PropTypes.instanceOf(Immutable.List)` or `React.PropTypes.instanceOf(Immutable.Map)` as PropTypes for components that should be specifying an `Immutable.List` **_of_** something or that an `Immutable.Map` **contains** some keys. A little *\"googling\"* came up empty, unless you want to use Flow, which I do not. So, I wrote `react-immutable-proptypes`.\n\nUsage is simple, they work with and like any `React.PropType.*` validator.\n\n```js\nvar ImmutablePropTypes = require('react-immutable-proptypes');\nvar MyReactComponent = React.createClass({\n    // ...\n    propTypes: {\n        myRequiredImmutableList: ImmutablePropTypes.listOf(\n            ImmutablePropTypes.contains({\n                someNumberProp: React.PropTypes.number.isRequired\n            })\n        ).isRequired\n    }\n    // ...\n});\n```\n\nSince version 0.1.7 there are convenience helpers for \"primitive\" Immutable.js objects.\n\n```js\npropTypes: {\n    oldListTypeChecker: React.PropTypes.instanceOf(Immutable.List),\n    anotherWay: ImmutablePropTypes.list,\n    requiredList: ImmutablePropTypes.list.isRequired,\n    mapsToo: ImmutablePropTypes.map,\n    evenIterable: ImmutablePropTypes.iterable\n}\n```\n\n\n## Installation\n\nInstalling via [npmjs](https://www.npmjs.com/package/react-immutable-proptypes)\n```bash\nnpm install --save react-immutable-proptypes\n```\n\n\n## API\n\nReact-Immutable-PropTypes has:\n* Primitive Types\n```js\nImmutablePropTypes.list         // Immutable.List.isList\nImmutablePropTypes.map          // Immutable.Map.isMap\nImmutablePropTypes.orderedMap   // Immutable.OrderedMap.isOrderedMap\nImmutablePropTypes.set          // Immutable.Set.isSet\nImmutablePropTypes.orderedSet   // Immutable.OrderedSet.isOrderedSet\nImmutablePropTypes.stack        // Immutable.Stack.isStack\nImmutablePropTypes.seq          // Immutable.Seq.isSeq\nImmutablePropTypes.iterable     // Immutable.Iterable.isIterable\nImmutablePropTypes.record       // instanceof Record\nImmutablePropTypes.contains     // Immutable.Iterable.isIterable - contains(shape)\nImmutablePropTypes.mapContains  // Immutable.Map.isMap - contains(shape)\n```\n\n* `ImmutablePropTypes.contains` (formerly `shape`) is based on `React.PropTypes.shape` and will try to work with any `Immutable.Iterable`. In my usage it is the most used validator, as I'm often trying to validate that a map has certain properties with certain values.\n\n```es6\n// ...\naMap: ImmutablePropTypes.contains({\n    aList: ImmutablePropTypes.contains({\n        0: React.PropTypes.number,\n        1: React.PropTypes.string,\n        2: React.PropTypes.number.isRequired,\n    }).isRequired,\n})\n// ...\n<SomeComponent aList={Immutable.fromJS({aList: [1, 'two', 3]})} />\n```\n\n* `ImmutablePropTypes.listOf` is based on `React.PropTypes.array` and is specific to `Immutable.List`.\n\n* `ImmutablePropTypes.mapOf` allows you to control both map values nad keys (in Immutable.Map, keys could be _anything_ including another Immutable collections). It accepts two arguments - first one for values, second one for keys (optional). If you are interested in validation of keys only, just pass `React.PropTypes.any` as the first argument.\n\n```es6\n// ...\naMap: ImmutablePropTypes.mapOf(\n    React.PropTypes.any, // validation for values\n    ImmutablePropTypes.mapContains({ // validation for keys\n        a: React.PropTypes.number.isRequired,\n        b: React.PropTypes.string\n    })\n)\n// ...\nconst aMap = Immutable.Map([\n    [Immutable.Map({a: 1, b: '2'}), 'foo'],\n    [Immutable.Map({a: 3}), [1, '2', 3]]\n]);\n<SomeComponent aMap={aMap} />\n```\n\n* `ImmutablePropTypes.orderedMapOf` is basically the same as `mapOf`, but it is specific to `Immutable.OrderedMap`.\n\n* `ImmutablePropTypes.orderedSetOf` is basically the same as `listOf`, but it is specific to `Immutable.OrderedSet`.\n\n* `ImmutablePropTypes.stackOf` is basically the same as `listOf`, but it is specific to `Immutable.Stack`.\n\n* `ImmutablePropTypes.iterableOf` is the generic form of listOf/mapOf. It is useful when there is no need to validate anything other than Immutable.js compatible (ie. `Immutable.Iterable`). Continue to use `listOf` and/or `mapOf` when you know the type.\n\n* `ImmutablePropTypes.recordOf` is like `contains`, except it operates on Record properties.\n\n```js\n// ...\naRecord: ImmutablePropTypes.recordOf({\n    keyA: React.PropTypes.string,\n    keyB: ImmutablePropTypes.list.isRequired\n})\n// ...\n```\n\n* `ImmutablePropTypes.mapContains` is based on `React.PropTypes.shape` and will only work with `Immutable.Map`.\n\n```es6\n// ...\naMap: ImmutablePropTypes.mapContains({\n    aList: ImmutablePropTypes.list.isRequired,\n})\n// ...\n<SomeComponent aList={Immutable.fromJS({aList: [1, 2]})} />\n```\n\nThese two validators cover the output of `Immutable.fromJS` on standard JSON data sources.\n\n## RFC\n\nPlease send a message or, better yet, create an issue/pull request if you know a better solution, find bugs, or want a feature. For example, should `listOf` work with `Immutable.Seq` or `Immutable.Range`. I can think of reasons it should, but it is not a use case I have at the present, so I'm less than inclined to implement it. Alternatively, we could add a validator for sequences and/or ranges.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 James Burnett\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-immutable-proptypes/-/react-immutable-proptypes-2.1.0.tgz#023d6f39bb15c97c071e9e60d00d136eac5fa0b4",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-immutable-proptypes/-/react-immutable-proptypes-2.1.0.tgz",
    "hash": "023d6f39bb15c97c071e9e60d00d136eac5fa0b4",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "023d6f39bb15c97c071e9e60d00d136eac5fa0b4"
}