{
  "manifest": {
    "name": "html-webpack-include-assets-plugin",
    "version": "1.0.2",
    "description": "Add the ability to include assets based on a list of paths",
    "main": "index.js",
    "files": [
      "index.js"
    ],
    "scripts": {
      "prepublish": "npm run test",
      "pretest": "semistandard",
      "test": "jasmine",
      "debug": "node-debug jasmine"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/jharris4/html-webpack-include-assets-plugin.git"
    },
    "keywords": [
      "webpack",
      "plugin",
      "html-webpack-plugin",
      "include",
      "assets"
    ],
    "author": {
      "name": "Jon Harris",
      "email": "harris.jb@gmail.com",
      "url": "https://github.com/jharris4"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/jharris4/html-webpack-include-assets-plugin/issues"
    },
    "homepage": "https://github.com/jharris4/html-webpack-include-assets-plugin",
    "devDependencies": {
      "cheerio": "^1.0.0-rc.2",
      "copy-webpack-plugin": "^4.0.1",
      "css-loader": "^0.28.7",
      "extract-text-webpack-plugin": "^3.0.0",
      "html-webpack-plugin": "^2.30.1",
      "jasmine": "^2.8.0",
      "rimraf": "^2.6.2",
      "semistandard": "^11.0.0",
      "style-loader": "^0.18.2",
      "webpack": "^3.6.0"
    },
    "dependencies": {
      "glob": "^7.1.2",
      "minimatch": "^3.0.4",
      "slash": "^1.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/ali/Project/uforce/cairo/.yarn/v1/npm-html-webpack-include-assets-plugin-1.0.2-8d36eadb81e9e6bf40b56dc2ae77c3d155295106/package.json",
    "readmeFilename": "README.md",
    "readme": "Include Assets extension for the HTML Webpack Plugin\n========================================\n[![npm version](https://badge.fury.io/js/html-webpack-include-assets-plugin.svg)](https://badge.fury.io/js/html-webpack-include-assets-plugin) [![Build Status](https://travis-ci.org/jharris4/html-webpack-include-assets-plugin.svg?branch=master)](https://travis-ci.org/jharris4/html-webpack-include-assets-plugin) [![js-semistandard-style](https://img.shields.io/badge/code%20style-semistandard-brightgreen.svg?style=flat-square)](https://github.com/Flet/semistandard)\n\nEnhances [html-webpack-plugin](https://github.com/ampedandwired/html-webpack-plugin)\nfunctionality by allowing you to specify js or css assets to be included.\n\nWhen using a plugin such as [copy-webpack-plugin](https://github.com/kevlened/copy-webpack-plugin) you may have assets output to your build directory that are not detected/output by the html-webpack-plugin.\n\nThis plugin allows you to force some of these assets to be included in the output from html-webpack-plugin.\n\nInstallation\n------------\nYou must be running webpack on node 4.x or higher\n\nInstall the plugin with npm:\n```shell\n$ npm install --save-dev html-webpack-include-assets-plugin\n```\n\n\nBasic Usage\n-----------\nRequire the plugin in your webpack config:\n\n```javascript\nvar HtmlWebpackIncludeAssetsPlugin = require('html-webpack-include-assets-plugin');\n```\n\nAdd the plugin to your webpack config as follows:\n\n```javascript\nplugins: [\n  new HtmlWebpackPlugin(),\n  new HtmlWebpackIncludeAssetsPlugin({ assets: [], append: true })\n]  \n```\n\nOptions\n-------\nThe available options are:\n\n- `jsExtensions`: `string` or `array`\n\n  Specifies the file extensions to use to determine if assets are script assets. Default is `['.js']`.\n\n- `cssExtensions`: `string` or `array`\n\n  Specifies the file extensions to use to determine if assets are style assets. Default is `['.css']`.\n\n- `assets`: `string` or `array` or `object`\n\n  Assets that will be output into your html-webpack-plugin template.\n\n  To specify just one asset, simply pass a string or object. To specify multiple, pass an array of strings or objects.\n\n  If the asset path is static and ends in one of the `jsExtensions` or `cssExtensions` values, simply use a string value.\n\n  If the asset is not static or does not have a valid extension, you can instead pass an object with properties `path` (required) and `type` or `glob` or `globPath` or `attributes` (optional). In this case `path` is the asset href/src, `type` is one of `js` or `css`, and `glob` is a wildcard to use to match all files in the path (uses the [glob](https://github.com/isaacs/node-glob) package). The `globPath` can be used to specify the directory from which the `glob` should search for filename matches (the default is to use `path` within webpack's output directory).\n  \n  The `attributes` property may be used to add additional attributes to the link or script element that is injected. The keys of this object are attribute names and the values are the attribute values.\n\n- `append`: `boolean`\n\n  Specifying whether the assets should be prepended (`false`) before any existing assets, or appended (`true`) after them.\n\n- `publicPath`: `boolean` or `string`\n\n  Specifying whether the assets should be prepended with webpack's public path or a custom publicPath (`string`).\n\n  A value of `false` may be used to disable prefixing with webpack's publicPath, or a value like `myPublicPath/` may be used to prefix all assets with the given string. Default is `true`.\n\n- `hash`: `boolean`\n\n  Specifying whether the assets should be appended with webpack's compilation hash. This is useful for cache busting. Default is `false`.\n\n- `files`: `string` or `array`\n\n  Files that the assets will be added to.\n\n  By default the assets will be included in all files. If files are defined, the assets will only be included in specified file globs (uses the [minimatch](https://github.com/isaacs/minimatch) package).\n\nExample\n-------\nUsing `HtmlWebpackIncludeAssetsPlugin` and `CopyWebpackPlugin` to include assets to `html-webpack-plugin` template :\n\n```javascript\nplugins: [\n  new CopyWebpackPlugin([\n    { from: 'node_modules/bootstrap/dist/css', to: 'css/'},\n    { from: 'node_modules/bootstrap/dist/fonts', to: 'fonts/'}\n  ]),\n  new HtmlWebpackPlugin(),\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: ['css/bootstrap.min.css', 'css/bootstrap-theme.min.css'],\n    append: false\n  })\n]  \n```\n\nAppending and prepending at the same time :\n\n```javascript\nplugins: [\n  new CopyWebpackPlugin([\n    { from: 'node_modules/bootstrap/dist/css', to: 'css/'},\n    { from: 'node_modules/bootstrap/dist/fonts', to: 'fonts/'}\n  ]),\n  new HtmlWebpackPlugin(),\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: ['css/bootstrap.min.css', 'css/bootstrap-theme.min.css'],\n    append: false\n  }),\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: ['css/custom.css'],\n    append: true\n  })\n]\n```\n\nUsing custom `jsExtensions` :\n\n```javascript\nplugins: [\n  new HtmlWebpackPlugin(),\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: ['dist/output.js', 'lib/content.jsx'],\n    append: false,\n    jsExtensions: ['.js', '.jsx']\n  })\n]\n```\n\nUsing custom `publicPath` :\n\n```javascript\nplugins: [\n  new CopyWebpackPlugin([\n    { from: 'node_modules/bootstrap/dist/css', to: 'css/'},\n    { from: 'node_modules/bootstrap/dist/fonts', to: 'fonts/'}\n  ]),\n  new HtmlWebpackPlugin(),\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: ['css/bootstrap.min.css', 'css/bootstrap-theme.min.css'],\n    append: false,\n    publicPath: 'myPublicPath/'\n  })\n]\n```\n\nManually specifying asset types :\n\n```javascript\nplugins: [\n  new CopyWebpackPlugin([\n    { from: 'node_modules/bootstrap/dist/css', to: 'css/'},\n    { from: 'node_modules/bootstrap/dist/fonts', to: 'fonts/'}\n  ]),\n  new HtmlWebpackPlugin(),\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: [\n      '/css/bootstrap.min.css',\n      '/css/bootstrap-theme.min.css',\n      { path: 'https://fonts.googleapis.com/css?family=Material+Icons', type: 'css' }\n    ],\n    append: false,\n    publicPath: ''\n  })\n]\n```\n\nAdding custom attributes to asset tags :\n\nThe bootstrap-theme link tag will be given an id=\"bootstrapTheme\" attribute.\n\n```javascript\nplugins: [\n  new CopyWebpackPlugin([\n    { from: 'node_modules/bootstrap/dist/css', to: 'css/'},\n    { from: 'node_modules/bootstrap/dist/fonts', to: 'fonts/'}\n  ]),\n  new HtmlWebpackPlugin(),\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: [\n      '/css/bootstrap.min.css',\n      { path: '/css/bootstrap-theme.min.css', attributes: { id: 'bootstrapTheme' } }\n    ],\n    append: false,\n    publicPath: ''\n  })\n]\n```\n\nUsing `hash` option :\n\nAll asset paths will be appended with a hash query parameter (`?hash=<the_hash>`)\n\n```javascript\nplugins: [\n  new CopyWebpackPlugin([\n    { from: 'node_modules/bootstrap/dist/css', to: 'css/'},\n    { from: 'node_modules/bootstrap/dist/fonts', to: 'fonts/'}\n  ]),\n  new HtmlWebpackPlugin(),\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: ['css/bootstrap.min.css', 'css/bootstrap-theme.min.css'],\n    append: false,\n    hash: true\n  })\n]\n```\n\nSpecifying specific `files`\n\n```javascript\nplugins: [\n  new CopyWebpackPlugin([\n    { from: 'node_modules/bootstrap/dist/css', to: 'css/'},\n    { from: 'node_modules/bootstrap/dist/fonts', to: 'fonts/'}\n  ]),\n  new HtmlWebpackPlugin({\n    filename: 'a/index.html'\n  }),\n  new HtmlWebpackPlugin({\n    filename: 'b/index.html'\n  }),\n  new HtmlWebpackIncludeAssetsPlugin({\n    files: ['a/**/*.html'],\n    assets: ['css/a.css'],\n    append: true\n  }),\n  new HtmlWebpackIncludeAssetsPlugin({\n    files: ['b/**/*.html'],\n    assets: ['css/b.css'],\n    append: true\n  })\n]\n```\n\nSpecifying assets usings a `glob`\n\nNote that since `copy-webpack-plugin` does not actually copy the files to webpack's output directory until *after* `html-webpack-plugin` has completed, it is necessary to use the `globPath` to retrieve filename matches relative to the original location of any such files.\n\n```javascript\nplugins: [\n  new CopyWebpackPlugin([\n    { from: 'node_modules/bootstrap/dist/css', to: 'css/'},\n    { from: 'node_modules/bootstrap/dist/fonts', to: 'fonts/'}\n  ]),\n  new HtmlWebpackPlugin(),\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: [{ path: 'css', glob: '*.css', globPath: 'node_modules/bootstrap/dist/css/' }],\n    append: true\n  })\n]\n```\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Jon Harris\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/html-webpack-include-assets-plugin/-/html-webpack-include-assets-plugin-1.0.2.tgz#8d36eadb81e9e6bf40b56dc2ae77c3d155295106",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/html-webpack-include-assets-plugin/-/html-webpack-include-assets-plugin-1.0.2.tgz",
    "hash": "8d36eadb81e9e6bf40b56dc2ae77c3d155295106",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "8d36eadb81e9e6bf40b56dc2ae77c3d155295106"
}