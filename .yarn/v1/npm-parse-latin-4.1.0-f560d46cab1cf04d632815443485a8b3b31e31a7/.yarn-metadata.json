{
  "manifest": {
    "name": "parse-latin",
    "version": "4.1.0",
    "description": "Latin-script (natural language) parser",
    "license": "MIT",
    "keywords": [
      "nlcst",
      "latin",
      "script",
      "natural",
      "language",
      "parser"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/wooorm/parse-latin"
    },
    "bugs": {
      "url": "https://github.com/wooorm/parse-latin/issues"
    },
    "author": {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "http://wooorm.com"
    },
    "contributors": [
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "http://wooorm.com"
      }
    ],
    "files": [
      "lib",
      "index.js"
    ],
    "dependencies": {
      "nlcst-to-string": "^2.0.0",
      "unist-util-modify-children": "^1.0.0",
      "unist-util-visit-children": "^1.0.0"
    },
    "devDependencies": {
      "browserify": "^14.0.0",
      "bundle-collapser": "^1.2.1",
      "esmangle": "^1.0.1",
      "is-hidden": "^1.0.1",
      "negate": "^1.0.0",
      "nlcst-test": "^1.0.0",
      "nyc": "^11.0.0",
      "regenerate": "^1.3.1",
      "remark-cli": "^4.0.0",
      "remark-preset-wooorm": "^3.0.0",
      "tape": "^4.0.0",
      "unicode-8.0.0": "^0.7.0",
      "unist-util-remove-position": "^1.1.0",
      "vfile": "^2.0.0",
      "xo": "^0.18.0"
    },
    "scripts": {
      "build-md": "remark . -qfo",
      "build-expressions": "node script/build-expressions",
      "build-bundle": "browserify index.js -p bundle-collapser/plugin --bare -s ParseLatin > parse-latin.js",
      "build-mangle": "esmangle parse-latin.js > parse-latin.min.js",
      "build": "npm run build-expressions && npm run build-md && npm run build-bundle && npm run build-mangle",
      "lint": "xo",
      "test-api": "node test/index.js",
      "test-coverage": "nyc --reporter lcov tape test/index.js",
      "test": "npm run build && npm run lint && npm run test-coverage"
    },
    "nyc": {
      "check-coverage": true,
      "lines": 100,
      "functions": 100,
      "branches": 100
    },
    "xo": {
      "space": true,
      "esnext": false,
      "rules": {
        "no-useless-escape": "off",
        "guard-for-in": "off",
        "max-depth": "off"
      },
      "ignores": [
        "parse-latin.js"
      ]
    },
    "remarkConfig": {
      "plugins": [
        "preset-wooorm"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/ali/Project/uforce/cairo/.yarn/v1/npm-parse-latin-4.1.0-f560d46cab1cf04d632815443485a8b3b31e31a7/package.json",
    "readmeFilename": "readme.md",
    "readme": "# parse-latin [![Build Status][travis-badge]][travis] [![Coverage Status][codecov-badge]][codecov] [![Chat][chat-badge]][chat]\n\nA Latin script language parser for [**retext**][retext] producing\n[**NLCST**][nlcst] nodes.\n\nWhether Old-English (“þā gewearþ þǣm hlāforde and þǣm hȳrigmannum wiþ\nānum penninge”), Icelandic (“Hvað er að frétta”), French (“Où sont\nles toilettes?”), `parse-latin` does a good job at tokenising it.\n\nNote also that `parse-latin` does a decent job at tokenising\nLatin-like scripts, Cyrillic (“Добро пожаловать!”), Georgian (“როგორა\nხარ?”), Armenian (“Շատ հաճելի է”), and such.\n\n## Installation\n\n[npm][]:\n\n```bash\nnpm install parse-latin\n```\n\n## Usage\n\n```javascript\nvar inspect = require('unist-util-inspect');\nvar Latin = require('parse-latin');\n\nvar tree = new Latin().parse('A simple sentence.');\n\nconsole.log(inspect(tree));\n```\n\nWhich, when inspecting, yields:\n\n```txt\nRootNode[1] (1:1-1:19, 0-18)\n└─ ParagraphNode[1] (1:1-1:19, 0-18)\n   └─ SentenceNode[6] (1:1-1:19, 0-18)\n      ├─ WordNode[1] (1:1-1:2, 0-1)\n      │  └─ TextNode: \"A\" (1:1-1:2, 0-1)\n      ├─ WhiteSpaceNode: \" \" (1:2-1:3, 1-2)\n      ├─ WordNode[1] (1:3-1:9, 2-8)\n      │  └─ TextNode: \"simple\" (1:3-1:9, 2-8)\n      ├─ WhiteSpaceNode: \" \" (1:9-1:10, 8-9)\n      ├─ WordNode[1] (1:10-1:18, 9-17)\n      │  └─ TextNode: \"sentence\" (1:10-1:18, 9-17)\n      └─ PunctuationNode: \".\" (1:18-1:19, 17-18)\n```\n\n## API\n\n### `ParseLatin(value)`\n\nExposes the functionality needed to tokenise natural Latin-script\nlanguages into a syntax tree.\nIf `value` is passed here, it’s not needed to give it to `#parse()`.\n\n#### `ParseLatin#tokenize(value)`\n\nTokenise `value` (`string`) into letters and numbers (words), white space, and\neverything else (punctuation).  The returned nodes are a flat list without\nparagraphs or sentences.\n\n###### Returns\n\n[`Array.<NLCSTNode>`][nlcst] — Nodes.\n\n#### `ParseLatin#parse(value)`\n\nTokenise `value` (`string`) into an [NLCST][nlcst] tree.  The returned node is\na `RootNode` with in it paragraphs and sentences.\n\n###### Returns\n\n[`NLCSTNode`][nlcst] — Root node.\n\n## Algorithm\n\n> Note: The easiest way to see **how parse-latin tokenizes and parses**,\n> is by using the [online parser demo](https://wooorm.github.io/parse-latin),\n> which shows the syntax tree corresponding to the typed text.\n\n`parse-latin` splits text into white space, word, and punctuation\ntokens.  `parse-latin` starts out with a pretty easy definition,\none that most other tokenisers use:\n\n*   A “word” is one or more letter or number characters\n*   A “white space” is one or more white space characters\n*   A “punctuation” is one or more of anything else\n\nThen, it manipulates and merges those tokens into an [NLCST][]\nsyntax tree, adding sentences and paragraphs where needed.\n\n*   Some punctuation marks are part of the word they occur in, e.g.,\n    `non-profit`, `she’s`, `G.I.`, `11:00`, `N/A`, `&c`,\n    `nineteenth- and...`\n*   Some full-stops do not mark a sentence end, e.g., `1.`, `e.g.`,\n    `id.`\n*   Although full-stops, question marks, and exclamation marks\n    (sometimes) end a sentence, that end might not occur directly\n    after the mark, e.g., `.)`, `.\"`\n*   And many more exceptions\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[travis-badge]: https://img.shields.io/travis/wooorm/parse-latin.svg\n\n[travis]: https://travis-ci.org/wooorm/parse-latin\n\n[codecov-badge]: https://img.shields.io/codecov/c/github/wooorm/parse-latin.svg\n\n[codecov]: https://codecov.io/github/wooorm/parse-latin\n\n[chat-badge]: https://img.shields.io/gitter/room/wooorm/retext.svg\n\n[chat]: https://gitter.im/wooorm/retext\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: LICENSE\n\n[author]: http://wooorm.com\n\n[retext]: https://github.com/wooorm/retext\n\n[nlcst]: https://github.com/wooorm/nlcst\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2014 Titus Wormer <tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/parse-latin/-/parse-latin-4.1.0.tgz#f560d46cab1cf04d632815443485a8b3b31e31a7",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/parse-latin/-/parse-latin-4.1.0.tgz",
    "hash": "f560d46cab1cf04d632815443485a8b3b31e31a7",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "f560d46cab1cf04d632815443485a8b3b31e31a7"
}