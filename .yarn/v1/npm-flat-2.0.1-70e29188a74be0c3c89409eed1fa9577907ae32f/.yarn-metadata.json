{
  "manifest": {
    "name": "flat",
    "version": "2.0.1",
    "main": "index.js",
    "scripts": {
      "test": "mocha -u tdd --reporter spec"
    },
    "license": "BSD-3-Clause",
    "description": "Take a nested Javascript object and flatten it, or unflatten an object with delimited keys",
    "devDependencies": {
      "mocha": "~2.4.5"
    },
    "dependencies": {
      "is-buffer": "~1.1.2"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/hughsk/flat.git"
    },
    "keywords": [
      "flat",
      "json",
      "flatten",
      "unflatten",
      "split",
      "object",
      "nested"
    ],
    "author": {
      "name": "Hugh Kennedy",
      "email": "hughskennedy@gmail.com",
      "url": "http://hughskennedy.com"
    },
    "bugs": {
      "url": "https://github.com/hughsk/flat/issues"
    },
    "homepage": "https://github.com/hughsk/flat",
    "_registry": "npm",
    "_loc": "/home/ali/Project/uforce/cairo/.yarn/v1/npm-flat-2.0.1-70e29188a74be0c3c89409eed1fa9577907ae32f/package.json",
    "readmeFilename": "README.md",
    "readme": "# flat [![Build Status](https://secure.travis-ci.org/hughsk/flat.png?branch=master)](http://travis-ci.org/hughsk/flat)\n\nTake a nested Javascript object and flatten it, or unflatten an object with\ndelimited keys.\n\n## Installation\n\n``` bash\n$ npm install flat\n```\n\n## Methods\n\n### flatten(original, options)\n\nFlattens the object - it'll return an object one level deep, regardless of how\nnested the original object was:\n\n``` javascript\nvar flatten = require('flat')\n\nflatten({\n    key1: {\n        keyA: 'valueI'\n    },\n    key2: {\n        keyB: 'valueII'\n    },\n    key3: { a: { b: { c: 2 } } }\n})\n\n// {\n//   'key1.keyA': 'valueI',\n//   'key2.keyB': 'valueII',\n//   'key3.a.b.c': 2\n// }\n```\n\n### unflatten(original, options)\n\nFlattening is reversible too, you can call `flatten.unflatten()` on an object:\n\n``` javascript\nvar unflatten = require('flat').unflatten\n\nunflatten({\n    'three.levels.deep': 42,\n    'three.levels': {\n        nested: true\n    }\n})\n\n// {\n//     three: {\n//         levels: {\n//             deep: 42,\n//             nested: true\n//         }\n//     }\n// }\n```\n\n## Options\n\n### delimiter\n\nUse a custom delimiter for (un)flattening your objects, instead of `.`.\n\n### safe\n\nWhen enabled, both `flat` and `unflatten` will preserve arrays and their\ncontents. This is disabled by default.\n\n``` javascript\nvar flatten = require('flat')\n\nflatten({\n    this: [\n        { contains: 'arrays' },\n        { preserving: {\n              them: 'for you'\n        }}\n    ]\n}, {\n    safe: true\n})\n\n// {\n//     'this': [\n//         { contains: 'arrays' },\n//         { preserving: {\n//             them: 'for you'\n//         }}\n//     ]\n// }\n```\n\n### object\n\nWhen enabled, arrays will not be created automatically when calling unflatten, like so:\n\n``` javascript\nunflatten({\n    'hello.you.0': 'ipsum',\n    'hello.you.1': 'lorem',\n    'hello.other.world': 'foo'\n}, { object: true })\n\n// hello: {\n//     you: {\n//         0: 'ipsum',\n//         1: 'lorem',\n//     },\n//     other: { world: 'foo' }\n// }\n```\n\n### overwrite\n\nWhen enabled, existing keys in the unflattened object may be overwritten if they cannot hold a newly encountered nested value:\n\n```javascript\nunflatten({\n    'TRAVIS': 'true',\n    'TRAVIS_DIR': '/home/travis/build/kvz/environmental'\n}, { overwrite: true })\n\n// TRAVIS: {\n//     DIR: '/home/travis/build/kvz/environmental'\n// }\n```\n\nWithout `overwrite` set to `true`, the `TRAVIS` key would already have been set to a string, thus could not accept the nested `DIR` element.\n\nThis only makes sense on ordered arrays, and since we're overwriting data, should be used with care.\n\n\n### maxDepth\n\nMaximum number of nested objects to flatten.\n\n``` javascript\nvar flatten = require('flat')\n\nflatten({\n    key1: {\n        keyA: 'valueI'\n    },\n    key2: {\n        keyB: 'valueII'\n    },\n    key3: { a: { b: { c: 2 } } }\n}, { maxDepth: 2 })\n\n// {\n//   'key1.keyA': 'valueI',\n//   'key2.keyB': 'valueII',\n//   'key3.a': { b: { c: 2 } }\n// }\n```\n",
    "licenseText": "Copyright (c) 2014, Hugh Kennedy\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the  nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/flat/-/flat-2.0.1.tgz#70e29188a74be0c3c89409eed1fa9577907ae32f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/flat/-/flat-2.0.1.tgz",
    "hash": "70e29188a74be0c3c89409eed1fa9577907ae32f",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "70e29188a74be0c3c89409eed1fa9577907ae32f"
}