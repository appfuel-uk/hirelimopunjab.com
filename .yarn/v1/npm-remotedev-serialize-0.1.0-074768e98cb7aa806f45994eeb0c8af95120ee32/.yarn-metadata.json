{
  "manifest": {
    "name": "remotedev-serialize",
    "version": "0.1.0",
    "description": "Serialize unserializable data and parse it back.",
    "main": "index.js",
    "scripts": {
      "lint": "eslint src test",
      "test": "jest --no-cache",
      "prepublish": "npm run lint && npm run test"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/zalmoxisus/remotedev-serialize.git"
    },
    "keywords": [
      "redux",
      "devtools"
    ],
    "author": {
      "name": "Mihail Diordiev",
      "email": "zalmoxisus@gmail.com",
      "url": "https://github.com/zalmoxisus"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/zalmoxisus/remotedev-serialize/issues"
    },
    "homepage": "https://github.com/zalmoxisus/remotedev-serialize",
    "devDependencies": {
      "eslint": "^2.13.1",
      "immutable": "^3.0.0",
      "jest": "^17.0.3"
    },
    "dependencies": {
      "jsan": "^3.1.0"
    },
    "_registry": "npm",
    "_loc": "/home/ali/Project/uforce/cairo/.yarn/v1/npm-remotedev-serialize-0.1.0-074768e98cb7aa806f45994eeb0c8af95120ee32/package.json",
    "readmeFilename": "README.md",
    "readme": "Serialize ImmutableJS data\n==============================\n\n### Installation\n\n```\nnpm install --save remotedev-serialize\n```\n\n### Usage with ImmutableJS data structures\n\nJust pass the Immutable library to our class:\n\n```js\nimport Immutable from 'immutable';\nimport Serialize from 'remotedev-serialize';\nconst { stringify, parse } =  Serialize(Immutable);\n\nconst data = Immutable.Repeat('hi', 100);\nconst serialized = stringify(data);\nconst parsed = parse(data);\nconsole.log(Immutable.is(parsed, data));\n```\n\nSee [the tests](https://github.com/zalmoxisus/remotedev-serialize/blob/master/test/immutable.spec.js) for more examples of usage.\n\n### Usage with ImmutableJS Record classes\n\nTo parse a Record class back, you need to specify a reference to it:\n\n```js\nimport Immutable from 'immutable';\nimport Serialize from 'remotedev-serialize';\n\nconst ABRecord = Immutable.Record({ a:1, b:2 });\nconst myRecord = new ABRecord({ b:3 });\n\nconst { stringify, parse } =  Serialize(Immutable, [ABRecord]);\n\nconst serialized = stringify(myRecord);\nconst parsed = parse(myRecord);\nconsole.log(Immutable.is(parsed, myRecord));\n```\n\n### Supported\n\n#### ImutableJS\n\n- [x] Record\n- [x] Range\n- [x] Repeat\n- [x] Map\n- [x] OrderedMap\n- [x] List\n- [x] Set\n- [x] OrderedSet\n- [x] Seq\n- [x] Stack\n\n\n#### ES6\n\n- [x] Symbol\n- [ ] Map\n- [ ] Set\n- [ ] Typed Array\n\n### License\n\nMIT\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/remotedev-serialize/-/remotedev-serialize-0.1.0.tgz#074768e98cb7aa806f45994eeb0c8af95120ee32",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/remotedev-serialize/-/remotedev-serialize-0.1.0.tgz",
    "hash": "074768e98cb7aa806f45994eeb0c8af95120ee32",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "074768e98cb7aa806f45994eeb0c8af95120ee32"
}