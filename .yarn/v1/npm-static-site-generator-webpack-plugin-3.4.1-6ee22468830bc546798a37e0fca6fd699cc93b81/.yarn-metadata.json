{
  "manifest": {
    "name": "static-site-generator-webpack-plugin",
    "version": "3.4.1",
    "description": "Minimal, unopinionated static site generator powered by webpack",
    "main": "index.js",
    "scripts": {
      "test": "istanbul cover _mocha test -- --timeout 20000",
      "coveralls": "cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/markdalgleish/static-site-generator-webpack-plugin"
    },
    "author": {
      "name": "Mark Dalgleish"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/markdalgleish/static-site-generator-webpack-plugin/issues"
    },
    "homepage": "https://github.com/markdalgleish/static-site-generator-webpack-plugin",
    "dependencies": {
      "bluebird": "^3.0.5",
      "cheerio": "^0.22.0",
      "eval": "^0.1.0",
      "url": "^0.11.0",
      "webpack-sources": "^0.2.0"
    },
    "devDependencies": {
      "async": "^2.0.1",
      "babel-core": "^6.2.1",
      "babel-loader": "^6.2.0",
      "babel-preset-es2015": "^6.1.18",
      "chai": "^3.4.1",
      "compression-webpack-plugin": "^0.3.1",
      "coveralls": "^2.11.4",
      "ejs": "^2.3.4",
      "glob": "^7.0.3",
      "istanbul": "^0.4.1",
      "mocha": "^3.0.2",
      "rimraf": "^2.4.4",
      "webpack": "^1.12.10",
      "webpack-stats-plugin": "^0.1.1"
    },
    "_registry": "npm",
    "_loc": "/home/ali/Project/uforce/cairo/.yarn/v1/npm-static-site-generator-webpack-plugin-3.4.1-6ee22468830bc546798a37e0fca6fd699cc93b81/package.json",
    "readmeFilename": "README.md",
    "readme": "[![Build Status](https://img.shields.io/travis/markdalgleish/static-site-generator-webpack-plugin/master.svg?style=flat-square)](http://travis-ci.org/markdalgleish/static-site-generator-webpack-plugin) [![Coverage Status](https://img.shields.io/coveralls/markdalgleish/static-site-generator-webpack-plugin/master.svg?style=flat-square)](https://coveralls.io/r/markdalgleish/static-site-generator-webpack-plugin) [![Dependency Status](https://img.shields.io/david/markdalgleish/static-site-generator-webpack-plugin.svg?style=flat-square)](https://david-dm.org/markdalgleish/static-site-generator-webpack-plugin) [![npm](https://img.shields.io/npm/v/static-site-generator-webpack-plugin.svg?style=flat-square)](https://npmjs.org/package/static-site-generator-webpack-plugin)\n\n# static site generator webpack plugin\n\nMinimal, unopinionated static site generator powered by webpack.\n\nBring the world of server rendering to your static build process. Either provide an array of paths to be rendered, or *crawl your site automatically*, and a matching set of `index.html` files will be rendered in your output directory by executing your own custom, webpack-compiled render function.\n\nThis plugin works particularly well with universal libraries like [React](https://github.com/facebook/react) and [React Router](https://github.com/rackt/react-router) since it allows you to pre-render your routes at build time, rather than requiring a Node server in production.\n\n## Install\n\n```bash\n$ npm install --save-dev static-site-generator-webpack-plugin\n```\n\n## Usage\n\nEnsure you have webpack installed, e.g. `npm install -g webpack`\n\n### webpack.config.js\n\n```js\nconst StaticSiteGeneratorPlugin = require('static-site-generator-webpack-plugin');\n\nmodule.exports = {\n\n  entry: './index.js',\n\n  output: {\n    filename: 'index.js',\n    path: 'dist',\n    /* IMPORTANT!\n     * You must compile to UMD or CommonJS\n     * so it can be required in a Node context: */\n    libraryTarget: 'umd'\n  },\n\n  plugins: [\n    new StaticSiteGeneratorPlugin({\n      paths: [\n        '/hello/',\n        '/world/'\n      ],\n      locals: {\n        // Properties here are merged into `locals`\n        // passed to the exported render function\n        greet: 'Hello'\n      }\n    })\n  ]\n\n};\n```\n\n### index.js\n\nSync rendering:\n\n```js\nmodule.exports = function render(locals) {\n  return '<html>' + locals.greet + ' from ' + locals.path + '</html>';\n};\n```\n\nAsync rendering via callbacks:\n\n```js\nmodule.exports = function render(locals, callback) {\n  callback(null, '<html>' + locals.greet + ' from ' + locals.path + '</html>');\n};\n```\n\nAsync rendering via promises:\n\n```js\nmodule.exports = function render(locals) {\n  return Promise.resolve('<html>' + locals.greet + ' from ' + locals.path + '</html>');\n};\n```\n\n## Multi rendering\n\nIf you need to generate multiple files per render, or you need to alter the path, you can return an object instead of a string, where each key is the path, and the value is the file contents:\n\n```js\nmodule.exports = function render() {\n  return {\n    '/': '<html>Home</html>',\n    '/hello': '<html>Hello</html>',\n    '/world': '<html>World</html>'\n  };\n};\n```\n\nNote that this will still be executed for each entry in your `paths` array in your plugin config.\n\n## Default locals\n\n```js\n// The path currently being rendered:\nlocals.path;\n\n// An object containing all assets:\nlocals.assets;\n\n// Advanced: Webpack's stats object:\nlocals.webpackStats;\n```\n\nAny additional locals provided in your config are also available.\n\n## Crawl mode\n\nRather than manually providing a list of paths, you can use the `crawl` option to automatically crawl your site. This will follow all relative links and iframes, executing your render function for each:\n\n```js\nmodule.exports = {\n\n  ...\n\n  plugins: [\n    new StaticSiteGeneratorPlugin({\n      crawl: true\n    })\n  ]\n};\n```\n\nNote that this can be used in conjunction with the `paths` option to allow multiple crawler entry points:\n\n```js\nmodule.exports = {\n\n  ...\n\n  plugins: [\n    new StaticSiteGeneratorPlugin({\n      crawl: true,\n      paths: [\n        '/',\n        '/uncrawlable-page/'\n      ]\n    })\n  ]\n};\n```\n\n## Custom file names\n\nBy providing paths that end in `.html`, you can generate custom file names other than the default `index.html`. Please note that this may break compatibility with your router, if you're using one.\n\n```js\nmodule.exports = {\n\n  ...\n\n  plugins: [\n    new StaticSiteGeneratorPlugin({\n      paths: [\n        '/index.html',\n        '/news.html',\n        '/about.html'\n      ]\n    })\n  ]\n};\n```\n\n## Globals\n\nIf required, you can provide an object that will exist in the global scope when executing your render function. This is particularly useful if certain libraries or tooling you're using assumes a browser environment.\n\nFor example, when using Webpack's `require.ensure`, which assumes that `window` exists:\n\n```js\nmodule.exports = {\n  ...,\n  plugins: [\n    new StaticSiteGeneratorPlugin({\n      globals: {\n        window: {}\n      }\n    })\n  ]\n}\n```\n\n## Asset support\n\ntemplate.ejs\n```ejs\n<% css.forEach(function(file){ %>\n<link href=\"<%- file %>\" rel=\"stylesheet\">\n<% }); %>\n\n<% js.forEach(function(file){ %>\n<script src=\"<%- file %>\" async></script>\n<% }); %>\n```\n\nindex.js\n```js\nif (typeof global.document !== 'undefined') {\n  const rootEl = global.document.getElementById('outlay');\n  React.render(\n    <App />,\n    rootEl,\n  );\n}\n\nexport default (data) => {\n  const assets = Object.keys(data.webpackStats.compilation.assets);\n  const css = assets.filter(value => value.match(/\\.css$/));\n  const js = assets.filter(value => value.match(/\\.js$/));\n  return template({ css, js, ...data});\n}\n```\n\n## Specifying entry\n\nThis plugin defaults to the first chunk found. While this should work in most cases, you can specify the entry name if needed:\n\n```js\nmodule.exports = {\n  ...,\n  plugins: [\n    new StaticSiteGeneratorPlugin({\n      entry: 'main'\n    })\n  ]\n}\n```\n\n## Compression support\n\nGenerated files can be compressed with [compression-webpack-plugin](https://github.com/webpack/compression-webpack-plugin), but first ensure that this plugin appears before compression-webpack-plugin in your plugins array:\n\n```js\nconst StaticSiteGeneratorPlugin = require('static-site-generator-webpack-plugin');\nconst CompressionPlugin = require('compression-webpack-plugin');\n\nmodule.exports = {\n  ...\n\n  plugins: [\n    new StaticSiteGeneratorPlugin(...),\n    new CompressionPlugin(...)\n  ]\n};\n```\n\n## Related projects\n\n- [react-router-to-array](https://github.com/alansouzati/react-router-to-array) - useful for avoiding hardcoded lists of routes to render\n- [gatsby](https://github.com/gatsbyjs/gatsby) - opinionated static site generator built on top of this plugin\n\n## License\n\n[MIT License](http://markdalgleish.mit-license.org)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Mark Dalgleish\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/static-site-generator-webpack-plugin/-/static-site-generator-webpack-plugin-3.4.1.tgz#6ee22468830bc546798a37e0fca6fd699cc93b81",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/static-site-generator-webpack-plugin/-/static-site-generator-webpack-plugin-3.4.1.tgz",
    "hash": "6ee22468830bc546798a37e0fca6fd699cc93b81",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "6ee22468830bc546798a37e0fca6fd699cc93b81"
}