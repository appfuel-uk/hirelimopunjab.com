{
  "manifest": {
    "name": "postcss-import",
    "version": "8.2.0",
    "description": "PostCSS plugin to import CSS files",
    "keywords": [
      "css",
      "postcss",
      "postcss-plugin",
      "import",
      "node modules",
      "npm"
    ],
    "author": {
      "name": "Maxime Thirouin"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/postcss/postcss-import.git"
    },
    "files": [
      "index.js",
      "lib"
    ],
    "dependencies": {
      "object-assign": "^4.0.1",
      "postcss": "^5.0.14",
      "postcss-value-parser": "^3.2.3",
      "promise-each": "^2.2.0",
      "read-cache": "^1.0.0",
      "resolve": "^1.1.7"
    },
    "devDependencies": {
      "ava": "^0.16.0",
      "eslint": "^1.10.3",
      "eslint-config-i-am-meticulous": "^2.0.0",
      "npmpub": "^3.0.1",
      "postcss-scss": "^0.1.3"
    },
    "optionalDependencies": {
      "pkg-resolve": "^0.1.7"
    },
    "jspm": {
      "name": "postcss-import",
      "main": "index.js",
      "browser": {
        "./lib/load-content": "@empty",
        "./lib/resolve-id": "@empty"
      }
    },
    "scripts": {
      "lint": "eslint --fix .",
      "pretest": "npm run lint",
      "test": "ava",
      "release": "npmpub"
    },
    "eslintConfig": {
      "extends": "eslint-config-i-am-meticulous/es5"
    },
    "_registry": "npm",
    "_loc": "/home/ali/Project/uforce/cairo/.yarn/v1/npm-postcss-import-8.2.0-f92fd2454e21ef4efb1e75c00c47ac03f4d1397c/package.json",
    "readmeFilename": "README.md",
    "readme": "# postcss-import\n\n[![Unix Build status](https://img.shields.io/travis/postcss/postcss-import/master.svg?branch=master&label=unix%20build)](https://travis-ci.org/postcss/postcss-import)\n[![Windows Build status](https://img.shields.io/appveyor/ci/MoOx/postcss-import/master.svg?label=window%20build)](https://ci.appveyor.com/project/MoOx/postcss-import/branch/master)\n[![Version](https://img.shields.io/npm/v/postcss-import.svg)](https://github.com/postcss/postcss-import/blob/master/CHANGELOG.md)\n\n> [PostCSS](https://github.com/postcss/postcss) plugin to transform `@import`\nrules by inlining content.\n\nThis plugin can consume local files, node modules or web_modules.\nTo resolve path of an `@import` rule, it can look into root directory\n(by default `process.cwd()`), `web_modules`, `node_modules`\nor local modules.\n_When importing a module, it will look for `index.css` or file referenced in\n`package.json` in the `style` or `main` fields._\nYou can also provide manually multiples paths where to look at.\n\n**Notes:**\n\n- **This plugin should probably be used as the first plugin of your list.\nThis way, other plugins will work on the AST as if there were only a single file\nto process, and will probably work as you can expect**.\n- This plugin works great with\n[postcss-url](https://github.com/postcss/postcss-url) plugin,\nwhich will allow you to adjust assets `url()` (or even inline them) after\ninlining imported files.\n- In order to optimize output, **this plugin will only import a file once** on\na given scope (root, media query...).\nTests are made from the path & the content of imported files (using a hash\ntable).\nIf this behavior is not what you want, look at `skipDuplicates` option\n- **If you are looking for glob, or sass like imports (prefixed partials)**,\nplease look at\n[postcss-easy-import](https://github.com/trysound/postcss-easy-import)\n(which use this plugin under the hood).\n- **This plugin attempts to follow the CSS `@import` spec**; `@import`\n  statements must precede all other statements (besides `@charset`).\n\n## Installation\n\n```console\n$ npm install postcss-import\n```\n\n## Usage\n\nIf your stylesheets are not in the same place where you run postcss\n(`process.cwd()`), you will need to use `from` option to make relative imports\nwork from input dirname.\n\n```js\n// dependencies\nvar fs = require(\"fs\")\nvar postcss = require(\"postcss\")\nvar atImport = require(\"postcss-import\")\n\n// css to be processed\nvar css = fs.readFileSync(\"css/input.css\", \"utf8\")\n\n// process css\npostcss()\n  .use(atImport())\n  .process(css, {\n    // `from` option is required so relative import can work from input dirname\n    from: \"css/input.css\"\n  })\n  .then(function (result) {\n    var output = result.css\n\n    console.log(output)\n  })\n```\n\nUsing this `input.css`:\n\n```css\n/* can consume `node_modules`, `web_modules` or local modules */\n@import \"cssrecipes-defaults\"; /* == @import \"./node_modules/cssrecipes-defaults/index.css\"; */\n@import \"normalize.css\"; /* == @import \"./node_modules/normalize.css/normalize.css\"; */\n\n@import \"css/foo.css\"; /* relative to stylesheets/ according to `from` option above */\n\n@import \"css/bar.css\" (min-width: 25em);\n\nbody {\n  background: black;\n}\n```\n\nwill give you:\n\n```css\n/* ... content of ./node_modules/cssrecipes-defaults/index.css */\n/* ... content of ./node_modules/normalize.css/normalize.css */\n\n/* ... content of foo.css */\n\n@media (min-width: 25em) {\n/* ... content of bar.css */\n}\n\nbody {\n  background: black;\n}\n```\n\nCheckout [tests](test) for more examples.\n\n### Options\n\n#### `root`\n\nType: `String`  \nDefault: `process.cwd()` or _dirname of\n[the postcss `from`](https://github.com/postcss/postcss#node-source)_\n\nDefine the root where to resolve path (eg: place where `node_modules` are).\nShould not be used that much.  \n_Note: nested `@import` will additionally benefit of the relative dirname of\nimported files._\n\n#### `path`\n\nType: `String|Array`  \nDefault: `[]`\n\nA string or an array of paths in where to look for files.\n\n#### `transform`\n\nType: `Function`  \nDefault: `null`\n\nA function to transform the content of imported files. Take one argument (file\n  content) and should return the modified content or a resolved promise with it.\n`undefined` result will be skipped.\n\n```js\ntransform: function(css) {\n  return postcss([somePlugin]).process(css).then(function(result) {\n    return result.css;\n  });\n}\n```\n\n#### `plugins`\n\nType: `Array`  \nDefault: `undefined`\n\nAn array of plugins to be applied on each imported files.\n\n#### `onImport`\n\nType: `Function`  \nDefault: `null`\n\nFunction called after the import process. Take one argument (array of imported\nfiles).\n\n#### `resolve`\n\nType: `Function`  \nDefault: `null`\n\nYou can overwrite the default path resolving way by setting this option.\nThis function gets `(id, basedir, importOptions)` arguments and returns full\npath, array of paths or promise resolving paths.\nYou can use [resolve](https://github.com/substack/node-resolve) for that.\n\n#### `load`\n\nType: `Function`  \nDefault: null\n\nYou can overwrite the default loading way by setting this option.\nThis function gets `(filename, importOptions)` arguments and returns content or\npromised content.\n\n#### `skipDuplicates`\n\nType: `Boolean`  \nDefault: `true`\n\nBy default, similar files (based on the same content) are being skipped.\nIt's to optimize output and skip similar files like `normalize.css` for example.\nIf this behavior is not what you want, just set this option to `false` to\ndisable it.\n\n#### `addDependencyTo`\n\nType: `Object`  \nDefault: null\n\nAn object with `addDependency()` method, taking file path as an argument.\nCalled whenever a file is imported.\nYou can use it for hot-reloading in webpack `postcss-loader` like this:\n\n```js\npostcss: function(webpack) {\n  return [\n    require('postcss-import')({\n      addDependencyTo: webpack\n      /* Is equivalent to\n      onImport: function (files) {\n        files.forEach(this.addDependency)\n      }.bind(webpack)\n      */\n    })\n  ]\n}\n```\n\n#### Example with some options\n\n```js\nvar postcss = require(\"postcss\")\nvar atImport = require(\"postcss-import\")\n\npostcss()\n  .use(atImport({\n    path: [\"src/css\"],\n    transform: require(\"css-whitespace\")\n  }))\n  .process(cssString)\n  .then(function (result) {\n    var css = result.css\n  })\n```\n\n---\n\n## CONTRIBUTING\n\n* ⇄ Pull requests and ★ Stars are always welcome.\n* For bugs and feature requests, please create an issue.\n* Pull requests must be accompanied by passing automated tests (`$ npm test`).\n\n## [Changelog](CHANGELOG.md)\n\n## [License](LICENSE)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) Maxime Thirouin, Jason Campbell & Kevin Mårtensson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/postcss-import/-/postcss-import-8.2.0.tgz#f92fd2454e21ef4efb1e75c00c47ac03f4d1397c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/postcss-import/-/postcss-import-8.2.0.tgz",
    "hash": "f92fd2454e21ef4efb1e75c00c47ac03f4d1397c",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "f92fd2454e21ef4efb1e75c00c47ac03f4d1397c"
}