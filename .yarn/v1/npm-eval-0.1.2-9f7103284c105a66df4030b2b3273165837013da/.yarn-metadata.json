{
  "manifest": {
    "author": {
      "name": "Pierre Curto"
    },
    "name": "eval",
    "description": "Evaluate node require() module content directly",
    "keywords": [
      "require",
      "eval",
      "vm",
      "module"
    ],
    "version": "0.1.2",
    "homepage": "http://github.com/pierrec/node-eval",
    "repository": {
      "type": "git",
      "url": "git://github.com/pierrec/node-eval.git"
    },
    "main": "eval.js",
    "bugs": {
      "url": "http://github.com/pierrec/node-eval/issues"
    },
    "licenses": [
      {
        "type": "MIT",
        "url": "http://github.com/pierrec/node-eval/raw/master/LICENSE"
      }
    ],
    "engines": {
      "node": ">= 0.8"
    },
    "dependencies": {
      "require-like": ">= 0.1.1"
    },
    "devDependencies": {},
    "scripts": {
      "test": "node test.js"
    },
    "_registry": "npm",
    "_loc": "/home/ali/Project/uforce/cairo/.yarn/v1/npm-eval-0.1.2-9f7103284c105a66df4030b2b3273165837013da/package.json",
    "readmeFilename": "README.md",
    "readme": "# Eval - require() for module content!\n\n## Overview\n\nThis module is a simple way to evaluate a module content in the same way as require() but without loading it from a file. Effectively, it mimicks the javascript evil `eval` function but leverages Node's VM module instead.\n\n\n## Benefits\n\nWhy would you be using the `eval` module over the native`require`? Most of the time `require` is fine but in some situations, I have found myself wishing for the following:\n\n* Ability to supply a context to a module\n* Ability to load the module file(s) from non node standard places\n\nOr simply to leverage JavaScript's `eval` but with sandboxing.\n\n\n## Download\n\nIt is published on node package manager (npm). To install, do:\n\n    npm install eval\n\n\n## Usage\n\n```` javascript\nvar _eval = require('eval')\nvar res = _eval(content /*, filename, scope, includeGlobals */)\n````\n\nThe following options are available:\n\n* `content` (__String__): the content to be evaluated\n* `filename` (__String__): optional dummy name to be given (used in stacktraces)\n* `scope` (__Object__): scope properties are provided as variables to the content\n* `includeGlobals` (__Boolean__): allow/disallow global variables (and require) to be supplied to the content (default=false)\n\n\n## Examples\n\n```` javascript\nvar _eval = require('eval')\nvar res = _eval('var x = 123; exports.x = x')\n// => res === { x: 123 }\n\nres = _eval('module.exports = function () { return 123 }')\n// => res() === 123\n\nres = _eval('module.exports = require(\"events\")', true)\n// => res === require('events')\n\nres = _eval('exports.x = process', true)\n// => res.x === process\n````\n\n\n## License\n\n[Here](https://github.com/pierrec/node-eval/tree/master/LICENSE)\n",
    "license": "MIT",
    "licenseText": "Copyright (c) 2012 Pierre Curto\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/eval/-/eval-0.1.2.tgz#9f7103284c105a66df4030b2b3273165837013da",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/eval/-/eval-0.1.2.tgz",
    "hash": "9f7103284c105a66df4030b2b3273165837013da",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "9f7103284c105a66df4030b2b3273165837013da"
}