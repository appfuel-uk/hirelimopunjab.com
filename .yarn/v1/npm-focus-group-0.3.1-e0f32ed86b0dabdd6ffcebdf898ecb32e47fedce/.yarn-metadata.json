{
  "manifest": {
    "name": "focus-group",
    "version": "0.3.1",
    "description": "Create a group of nodes with special focusing powers",
    "main": "index.js",
    "scripts": {
      "demo-bundle": "browserify demo/index.js -o demo/demo-bundle.js",
      "demo-watch": "watchify demo/index.js -d -v -o demo/demo-bundle.js",
      "demo-dev": "npm run demo-watch & http-server demo",
      "test-dev": "karma start",
      "test": "karma start --single-run --browsers PhantomJS --reporters progress,coverage,coveralls"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/davidtheclark/focus-group.git"
    },
    "keywords": [
      "focus",
      "accessibility",
      "a11y",
      "arrows",
      "keyboard",
      "navigation",
      "aria"
    ],
    "author": {
      "name": "David Clark"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/davidtheclark/focus-group/issues"
    },
    "homepage": "https://github.com/davidtheclark/focus-group#readme",
    "devDependencies": {
      "browserify": "13.0.0",
      "browserify-istanbul": "0.2.1",
      "d3-queue": "2.0.2",
      "eslint": "^3.0.1",
      "http-server": "0.8.5",
      "karma": "0.13.19",
      "karma-browserify": "5.0.1",
      "karma-chrome-launcher": "0.2.2",
      "karma-coverage": "0.5.3",
      "karma-coveralls": "1.1.2",
      "karma-mocha": "0.2.1",
      "karma-phantomjs-launcher": "1.0.0",
      "mocha": "2.4.5",
      "phantomjs-prebuilt": "2.1.3",
      "power-assert": "1.2.0",
      "simulant": "0.2.0",
      "watchify": "3.7.0"
    },
    "_registry": "npm",
    "_loc": "/home/ali/Project/uforce/cairo/.yarn/v1/npm-focus-group-0.3.1-e0f32ed86b0dabdd6ffcebdf898ecb32e47fedce/package.json",
    "readmeFilename": "README.md",
    "readme": "# focus-group\n\n[![Build Status](https://travis-ci.org/davidtheclark/focus-group.svg?branch=master)](https://travis-ci.org/davidtheclark/focus-group)\n[![Coverage Status](https://coveralls.io/repos/github/davidtheclark/focus-group/badge.svg?branch=master)](https://coveralls.io/github/davidtheclark/focus-group?branch=master)\n\nCreate a group of nodes with special focus-related powers.\n\nSpecifically, you can do the following with your focus group:\n\n- Use different keybindings to move focus through the nodes\n- Type (with letters) to jump focus to a specific node based on its text\n\nEssentially, it mimics some of the essential keyboard interactions of a native `<select>`.\n\nThese kinds of powers are useful for:\n\n- Accessible menus, like [react-aria-menubutton](//github.com/davidtheclark/react-aria-menubutton)\n- Any other widgets whose keyboard UX will improve by enabling arrow-key navigation and letter-key jumping\n\n## Concepts\n\nA focus-group is composed of members.\n\nThe order of the members matters, because focus moves forwards and backwards through the group, in order.\n\nEach member consists of a DOM node and some text associated with that node.\nThe member's text will be used for letter-key jumping (a.k.a. string searching).\nEach member's text can be established in a few ways:\n\n- It can be manually specified when adding the member to the group, via `setMembers()` or `addMember()` (see below).\n- If the member's node has a `data-focus-group-text` attribute, that value will serve as the member's text.\n- If neither of the above is provided, the member's text will be the `textContent` of its node.\n\n## Keyboard Interactions\n\nWhen focus is inside the focus-group, the following things should happen:\n\n- If you press one of your `next` `keybindings` (the down arrow by default), focus moves\n  from the currently focused member to the next member in the group (or wraps back\n  to the front, according to the `wrap` option).\n- If you press one of your `prev` `keybindings` (the up arrow by default), focus moves\n  from the currently focused member to the previous member in the group (or wraps around\n  to the back, according to the `wrap` option).\n- If you press a letter key, string searching begins (see below!).\n\n### String searching\n\nIf the option `stringSearch` is `true` and focus is within the group, the following things happen:\n\n- When you start typing, focus moves to the first member whose registered text begins with\n  whatever you've been typing.\n- As long as each keystroke occurs within `stringSearchDelay`,\n  the search string will extend (e.g. `f` -> `fa` -> `far` -> `farm`) and focus will move\n  accordingly.\n- If no text matches the search string, focus will not move.\n- After you have not typed any letters for `stringSearchDelay`, the search\n  string resets and you can start over (e.g. you type `fa` then wait and type `go` to match `gorge`).\n\nThis all mimics the native `<select>` behavior.\n\nNote that like the native `<select>`, typing only matches the *beginning of words*. So you can't focus `David Clark` by typing `Clark`.\n\n## API\n\n### var focusGroup = createFocusGroup([options])\n\nThis is the function you get when you `require()` or `import` the module.\n\n```js\nvar createFocusGroup = require('focus-group');\nvar myMegaMenuFocusGroup = createFocusGroup();\n```\n\n#### Options\n\n**members** { Array }: Designate initial members of the group. Can be any of the following:\n\n- An array of DOM nodes (or a NodeList, like what's returned by `querySelectorAll()`)\n- An array of member objects, each object with the following properties: `node` (the DOM node),\n  and (optionally) `text` (the text that should be associated with that node for letter-navigation)\n\nYou can omit this option and add members later with `addMember()` or `setMembers()`. Default: `[]`.\n\n**keybindings** { Object of `'next'`, `'prev'`, `'first'`, or `'last'` }:\nSpecify which key events should move the focus *forward*, *back*, to the *first* member, or to the *last* member through the group. Provide objects (or arrays of objects) that describe the requirements of a [KeyboardEvent](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent) that should trigger that keybinding. Undesignated modifier keys are false by default. So when using something like `{ keyCode: 38 }`, that keybinding will be ignored if key 38 is combined with meta, ctrl, or alt.\n\nDefault:\n``` js\n{\n  next: { keyCode: 40 }, // ArrowDown\n  prev: { keyCode: 38 }, // ArrowUp\n}\n```\n\nUse arrays of objects for multiple key bindings:\n``` js\n{\n  next: [{ key: 'ArrowDown' }, { key: 'ArrowRight' }],\n  prev: [{ key: 'ArrowUp' }, { key: 'ArrowLeft' }],\n}\n```\n\nEven add modifiers or any valid event properties:\n``` js\n{\n  first: { keyCode: 74, metaKey: true },\n  last: { keyCode: 75, metaKey: true },\n}\n```\n\n**wrap** { Boolean }:\nIf `true`, when the arrow keys are moving focus they will wrap around the group. That is, when focus is on the last item and you move focus forward, the first item will focus; and when focus is on the first item and you move focus back, the last item will focus.\n\n**stringSearch** { Boolean }:\nIf `true`, string searching is enabled (see below).\nDefault: `false`.\n\n**stringSearchDelay** { Number }:\nThe number of milliseconds that should elapse between the user's last letter entry (with the keyboard)\nand a refresh of the string search (see below).\nDefault: `800`.\n\n### focusGroup.activate()\n\nStart this group listening to keyboard events and responding accordingly.\n\nReturns the focus group instance.\n\n### focusGroup.deactivate()\n\nStop this group listening to keyboard events.\n\nReturns the focus group instance.\n\n### focusGroup.addMember(member[, index])\n\nAdd a member to the group.\n\n`member` can be any of the following:\n\n- A DOM node\n- An object with the following properties:\n  - `node` (the node itself)\n  - (optionally) `text`: Text that should be associated with that node for letter-navigation. If none is provided, focus-group will check for a `data-focus-group-text` attribute or fallback to the node's `textContent.`\n\nIf `index` is provided, the member will be added at that index.\nOtherwise, it will be added to the end of the group.\n\nReturns the focus group instance.\n\n### focusGroup.removeMember(member)\n\nRemove a member from the group.\n\n`member` can be any of the following:\n\n- A DOM node\n- An index for the member that should be removed.\n\nReturns the focus group instance.\n\n### focusGroup.clearMembers()\n\nEmpty the focus group of members.\n\nReturns the focus group instance.\n\n### focusGroup.setMembers(members)\n\nSet the focus group's members (clearing any that already exist).\n\n`members` can be any of the following:\n\n- An array of DOM nodes (or a NodeList, like what's returned by `querySelectorAll()`)\n- An array of member objects, each object with the following properties:\n  - `node` (the node itself)\n  - (optionally) `text`: Text that should be associated with that node for letter-navigation. If none is provided, focus-group will check for a `data-focus-group-text` attribute or fallback to the node's `textContent.\n\nReturns the focus group instance.\n\n### focusGroup.getMembers()\n\nReturns the focus group's current array of members.\n\nEach item in the array is an object with `node` and `text` properties.\n\n### focusGroup.focusNodeAtIndex(index)\n\nFocuses the node at a particular index in the focus group's member array.\n\nIf no member exists at that index, does nothing.\n\nReturns the focus group instance.\n\n### focusGroup.moveFocusForward()\n\nMoves the focus forward one member, if focus is already within the group.\n\nIf focus is not within the group, does nothing.\n\nReturns the index of the newly focused member.\n\n### focusGroup.moveFocusBack()\n\nMoves the focus back one member, if focus is already within the group.\n\nIf focus is not within the group, does nothing.\n\nReturns the index of the newly focused member.\n\n## Contributing\n\nPlease note that this project is released with a Contributor Code of Conduct.\nBy participating in this project you agree to abide by its terms.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 David Clark\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/focus-group/-/focus-group-0.3.1.tgz#e0f32ed86b0dabdd6ffcebdf898ecb32e47fedce",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/focus-group/-/focus-group-0.3.1.tgz",
    "hash": "e0f32ed86b0dabdd6ffcebdf898ecb32e47fedce",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "e0f32ed86b0dabdd6ffcebdf898ecb32e47fedce"
}