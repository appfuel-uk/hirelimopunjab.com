{
  "manifest": {
    "name": "redux-devtools-instrument",
    "version": "1.8.2",
    "description": "Redux DevTools instrumentation",
    "main": "lib/instrument.js",
    "scripts": {
      "clean": "rimraf lib",
      "build": "babel src --out-dir lib",
      "lint": "eslint src test",
      "test": "NODE_ENV=test mocha --compilers js:babel-core/register --recursive",
      "test:watch": "NODE_ENV=test mocha --compilers js:babel-core/register --recursive --watch",
      "test:cov": "babel-node ./node_modules/.bin/isparta cover ./node_modules/.bin/_mocha -- --recursive",
      "prepublish": "npm run lint && npm run test && npm run clean && npm run build"
    },
    "files": [
      "lib",
      "src"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/zalmoxisus/redux-devtools-instrument.git"
    },
    "keywords": [
      "redux",
      "devtools",
      "flux",
      "hot reloading",
      "time travel",
      "live edit"
    ],
    "author": {
      "name": "Dan Abramov",
      "email": "dan.abramov@me.com",
      "url": "http://github.com/gaearon"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/zalmoxisus/redux-devtools-instrument/issues"
    },
    "homepage": "https://github.com/zalmoxisus/redux-devtools-instrument",
    "devDependencies": {
      "babel-cli": "^6.3.17",
      "babel-core": "^6.3.17",
      "babel-eslint": "^4.1.6",
      "babel-loader": "^6.2.0",
      "babel-preset-es2015-loose": "^6.1.3",
      "babel-preset-stage-0": "^6.3.13",
      "eslint": "^0.23",
      "eslint-config-airbnb": "0.0.6",
      "eslint-plugin-react": "^2.3.0",
      "expect": "^1.6.0",
      "isparta": "^3.0.3",
      "mocha": "^2.2.5",
      "redux": "^3.5.2",
      "rimraf": "^2.3.4",
      "rxjs": "^5.0.0-beta.6",
      "webpack": "^1.11.0"
    },
    "dependencies": {
      "lodash": "^4.2.0",
      "symbol-observable": "^1.0.2"
    },
    "_registry": "npm",
    "_loc": "/home/ali/Project/uforce/cairo/.yarn/v1/npm-redux-devtools-instrument-1.8.2-5e91cfe402e790dae3fd2f0d235f7b7d84b09ffe/package.json",
    "readmeFilename": "README.md",
    "readme": "Redux DevTools Instrumentation\n==============================\n\nRedux enhancer used along with [Redux DevTools](https://github.com/gaearon/redux-devtools) or [Remote Redux DevTools](https://github.com/zalmoxisus/remote-redux-devtools).\n\n### Installation\n\n```\nnpm install --save-dev redux-devtools-instrument\n```\n\n### Usage\n\nAdd the store enhancer:\n\n##### `store/configureStore.js`\n\n```js\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport devTools from 'remote-redux-devtools';\nimport reducer from '../reducers';\n\n// Usually you import the reducer from the monitor\n// or apply with createDevTools as explained in Redux DevTools\nconst monitorReducer = (state = {}, action) => state; \n\nexport default function configureStore(initialState) {\n  const enhancer = compose(\n    applyMiddleware(...middlewares),\n    // other enhancers and applyMiddleware should be added before the instrumentation\n    instrument(monitorReducer, { maxAge: 50 })\n  );\n  \n  // Note: passing enhancer as last argument requires redux@>=3.1.0\n  return createStore(reducer, initialState, enhancer);\n}\n```\n\n### API\n\n`instrument(monitorReducer, [options])`\n\n- arguments\n  - **monitorReducer** *function* called whenever an action is dispatched ([see the example of a monitor reducer](https://github.com/gaearon/redux-devtools-log-monitor/blob/master/src/reducers.js#L13)).\n  - **options** *object*\n    - **maxAge** *number* - maximum allowed actions to be stored on the history tree, the oldest actions are removed once `maxAge` is reached. \n    - **shouldCatchErrors** *boolean* - if specified as `true`, whenever there's an exception in reducers, the monitors will show the error message, and next actions will not be dispatched.\n    - **shouldRecordChanges** *boolean* - if specified as `false`, it will not record the changes till `pauseRecording(false)` is dispatched. Default is `true`.\n    - **pauseActionType** *string* - if specified, whenever `pauseRecording(false)` lifted action is dispatched and there are actions in the history log, will add this action type. If not specified, will commit when paused.\n    - **shouldStartLocked** *boolean* - if specified as `true`, it will not allow any non-monitor actions to be dispatched till `lockChanges(false)` is dispatched. Default is `false`.\n    - **shouldHotReload** *boolean* - if set to `false`, will not recompute the states on hot reloading (or on replacing the reducers). Default to `true`.\n\n### License\n\nMIT\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Dan Abramov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/redux-devtools-instrument/-/redux-devtools-instrument-1.8.2.tgz#5e91cfe402e790dae3fd2f0d235f7b7d84b09ffe",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/redux-devtools-instrument/-/redux-devtools-instrument-1.8.2.tgz",
    "hash": "5e91cfe402e790dae3fd2f0d235f7b7d84b09ffe",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "5e91cfe402e790dae3fd2f0d235f7b7d84b09ffe"
}