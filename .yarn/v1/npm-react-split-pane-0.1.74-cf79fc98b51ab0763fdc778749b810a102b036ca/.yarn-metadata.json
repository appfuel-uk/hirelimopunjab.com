{
  "manifest": {
    "name": "react-split-pane",
    "description": "React split-pane component",
    "main": "index.js",
    "types": "index.d.ts",
    "version": "0.1.74",
    "repository": {
      "type": "git",
      "url": "https://github.com/tomkp/react-split-pane"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/tomkp/react-split-pane"
    },
    "homepage": "https://github.com/tomkp/react-split-pane",
    "author": {
      "name": "tomkp",
      "email": "tom@tomkp.com"
    },
    "keywords": [
      "react",
      "react-component",
      "split-pane",
      "react-split-pane",
      "es6"
    ],
    "dependencies": {
      "@types/inline-style-prefixer": "^3.0.0",
      "@types/react": "^16.0.18",
      "inline-style-prefixer": "^3.0.6",
      "prop-types": "^15.5.10",
      "react-style-proptype": "^3.0.0"
    },
    "devDependencies": {
      "babel-cli": "^6.24.1",
      "babel-plugin-add-module-exports": "^0.2.1",
      "babel-plugin-transform-object-assign": "^6.22.0",
      "babel-preset-es2015": "^6.24.1",
      "babel-preset-react": "^6.24.1",
      "babelify": "^7.3.0",
      "browserify": "^14.4.0",
      "chai": "^4.0.2",
      "chai-spies": "^0.7.1",
      "coveralls": "^2.13.1",
      "express": "^4.15.3",
      "mochify": "^3.3.0",
      "mochify-istanbul": "^2.4.2",
      "prettier": "^1.7.4",
      "react": "^15.6.1",
      "react-dom": "^15.6.1",
      "surge": "^0.19.0",
      "typescript": "^2.5.3",
      "watchify": "^3.9.0"
    },
    "scripts": {
      "compile": "babel -d lib/ src/",
      "compile:watch": "babel -w -d lib/ src/",
      "prepublish": "npm run compile",
      "test": "npm run compile && mochify -R spec",
      "test:watch": "npm run compile:watch & mochify -R spec --watch",
      "test:coverage": "mochify --plugin [ mochify-istanbul --exclude '**/test/**' --report lcovonly ] && cat lcov.info | coveralls && rm lcov.info",
      "demo": "npm run compile && browserify demo/Examples.js -d -t -o demo/bundle.js",
      "demo:watch": "npm run compile:watch & watchify demo/Examples.js -d -t -o demo/bundle.js",
      "demo:publish": "npm run compile && browserify demo/Examples.js -d -t -o demo/bundle.js && surge demo react-split-pane.surge.sh",
      "prettier": "prettier --single-quote --trailing-comma es5 --write './{src,test}/**/*.js'",
      "release:patch": "npm test && npm run compile && npm version patch && git push && npm publish"
    },
    "browserify": {
      "transform": [
        [
          "babelify"
        ]
      ]
    },
    "false": {},
    "_registry": "npm",
    "_loc": "/home/ali/Project/uforce/cairo/.yarn/v1/npm-react-split-pane-0.1.74-cf79fc98b51ab0763fdc778749b810a102b036ca/package.json",
    "readmeFilename": "README.md",
    "readme": "# React Split Pane\n\nSplit-Pane component built with [React](http://facebook.github.io/react), can be split vertically or horizontally.\n\n```\nnpm install react-split-pane\n```\n\n[![Build Status](https://img.shields.io/travis/tomkp/react-split-pane/master.svg?style=flat-square)](https://travis-ci.org/tomkp/react-split-pane)\n[![Coverage Status](https://img.shields.io/coveralls/tomkp/react-split-pane/master.svg?style=flat-square)](https://coveralls.io/r/tomkp/react-split-pane)\n\n\nCheck out the [demos](http://react-split-pane.surge.sh/)\n\n\n```html\n   <SplitPane split=\"vertical\" minSize={50} defaultSize={100}>\n       <div></div>\n       <div></div>\n   </SplitPane>\n```\n\n```html\n    <SplitPane split=\"vertical\" minSize={50}>\n        <div></div>\n        <SplitPane split=\"horizontal\">\n            <div></div>\n            <div></div>\n        </SplitPane>\n    </SplitPane>\n```\n\n### Primary pane\n\nBy dragging 'draggable' surface you can change size of the first pane.\nThe first pane keeps then its size while the second pane is resized by browser window.\nBy default it is the left pane for 'vertical' SplitPane and the top pane for 'horizontal' SplitPane.\nIf you want to keep size of the second pane and let the first pane to shrink or grow by browser window dimensions,\nset SplitPane prop `primary` to `second`. In case of 'horizontal' SplitPane the height of bottom pane remains the same.\n\nResizing can be disabled by passing the `allowResize` prop as `false` (`allowResize={false}`). Resizing is enabled by default.\n\nYou can also set the size of the pane using the `size` prop. Note that a size set through props ignores the `defaultSize` and `minSize` properties.\n\nIn this example right pane keeps its width 200px while user is resizing browser window.\n\n```html\n    <SplitPane split=\"vertical\" defaultSize={200} primary=\"second\">\n        <div></div>\n        <div></div>\n    </SplitPane>\n```\n\n### maxSize\nYou can limit the maximal size of the 'fixed' pane using the maxSize parameter with a positive value (measured in pixels but state just a number).\nIf you wrap the SplitPane into a container component (yes you can, just remember the container has to have the relative or absolute positioning),\nthen you'll need to limit the movement of the splitter (resizer) at the end of the SplitPane (otherwise it can be dragged outside the SplitPane\nand you don't catch it never more). For this purpose use the maxSize parameter with value 0. When dragged the splitter/resizer will stop at the border\nof the SplitPane component and think this you'll be able to pick it again and drag it back then.\nAnd more: if you set the maxSize to negative value (e.g. -200), then the splitter stops 200px before the border (in other words it sets the minimal\nsize of the 'resizable' pane in this case). This can be useful also in the full-screen case of use.\n\n### step\nYou can use the step prop to only allow resizing in fixed increments.\n\n### Persisting Positions\n\nEach SplitPane accepts an onChange function prop.  Used in conjunction with\ndefaultSize and a persistence layer, you can ensure that your splitter choices\nsurvive a refresh of your app.\n\nFor example, if you are comfortable with the trade-offs of localStorage, you\ncould do something like the following:\n\n```html\n    <SplitPane split=\"vertical\" minSize={50}\n               defaultSize={ parseInt(localStorage.getItem('splitPos'), 10) }\n               onChange={ size => localStorage.setItem('splitPos', size) }>\n        <div></div>\n        <div></div>\n    </SplitPane>\n```\n\nDisclaimer: localStorage has a variety of performance trade-offs.  Browsers such\nas Firefox have now optimized localStorage use so that they will asynchronously\ninitiate a read of all saved localStorage data for an origin once they know the\npage will load.  If the data has not fully loaded by the time code accesses\nlocalStorage, the code will cause the page's main thread to block until the\ndatabase load completes.  When the main thread is blocked, no other JS code will\nrun or layout will occur.  In multiprocess browsers and for users with fast\ndisk storage, this will be less of a problem.  You *are* likely to get yelled at\nif you use localStorage.\n\nA potentially better idea is to use something like\nhttps://github.com/mozilla/localForage although hooking it up will be slightly\nmore involved.  You are likely to be admired by all for judiciously avoiding\nuse of localStorage.\n\n### Resizing callbacks\n\nIf you need more control over resizing, SplitPane can notify you about when resizing started\nand when it ended through two callbacks: `onDragStarted` and `onDragFinished`.\n\n### Example styling\n\nThis gives a single pixel wide divider, but with a 'grabbable' surface of 11 pixels.\n\nThanks to ```background-clip: padding-box;``` for making transparent borders possible.\n\n\n```css\n\n    .Resizer {\n        background: #000;\n        opacity: .2;\n        z-index: 1;\n        -moz-box-sizing: border-box;\n        -webkit-box-sizing: border-box;\n        box-sizing: border-box;\n        -moz-background-clip: padding;\n        -webkit-background-clip: padding;\n        background-clip: padding-box;\n    }\n\n     .Resizer:hover {\n        -webkit-transition: all 2s ease;\n        transition: all 2s ease;\n    }\n\n     .Resizer.horizontal {\n        height: 11px;\n        margin: -5px 0;\n        border-top: 5px solid rgba(255, 255, 255, 0);\n        border-bottom: 5px solid rgba(255, 255, 255, 0);\n        cursor: row-resize;\n        width: 100%;\n    }\n\n    .Resizer.horizontal:hover {\n        border-top: 5px solid rgba(0, 0, 0, 0.5);\n        border-bottom: 5px solid rgba(0, 0, 0, 0.5);\n    }\n\n    .Resizer.vertical {\n        width: 11px;\n        margin: 0 -5px;\n        border-left: 5px solid rgba(255, 255, 255, 0);\n        border-right: 5px solid rgba(255, 255, 255, 0);\n        cursor: col-resize;\n    }\n\n    .Resizer.vertical:hover {\n        border-left: 5px solid rgba(0, 0, 0, 0.5);\n        border-right: 5px solid rgba(0, 0, 0, 0.5);\n    }\n    .Resizer.disabled {\n      cursor: not-allowed;\n    }\n    .Resizer.disabled:hover {\n      border-color: transparent;\n    }\n\n ```\n### Inline Styles\n\nYou can also pass inline styles to the components via props. These are:\n\n * `paneStyle` - Styling to be applied to both panes\n * `pane1Style` - Styling to be applied to the first pane, with precedence over `paneStyle`\n * `pane2Style` - Styling to be applied to the second pane, with precedence over `paneStyle`\n * `resizerStyle` - Styling to be applied to the resizer bar\n\n\n### Contributing\n\nI'm always happy to receive Pull Requests for contributions of any kind. \n\nPlease include tests and/or update the examples if possible.\n  \nI've been working on an updated version of this library - if you'd like to get involved in any way please ping me a message.    \n  \nThanks, Tom  \n  \n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 tomkp\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-split-pane/-/react-split-pane-0.1.74.tgz#cf79fc98b51ab0763fdc778749b810a102b036ca",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-split-pane/-/react-split-pane-0.1.74.tgz",
    "hash": "cf79fc98b51ab0763fdc778749b810a102b036ca",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "cf79fc98b51ab0763fdc778749b810a102b036ca"
}